# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication

from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingParameterBoolean,
                       QgsProject,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorLayer,
                       QgsCoordinateReferenceSystem,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink,
                       QgsFeatureRequest,
                       QgsField,
                       QgsVectorLayer,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterField,
                       QgsProcessingParameterString,
                       QgsVectorFileWriter,
                       QgsProcessingParameterFile,
                       QgsWkbTypes,
                       QgsProcessingParameterDefinition,
                       QgsFeature,
                       QgsProcessingUtils,
                       QgsSymbol,
                       QgsCategorizedSymbolRenderer,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory)
import processing
import tempfile
import shutil
import re
import os.path
import os
from sys import platform
import subprocess
import locale
from qgis.utils import iface
import configparser



class RapprocheDepAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    METROPOLE = 'METROPOLE'
    GUADELOUPE = 'GUADELOUPE'
    GUYANE = 'GUYANE'
    MARTINIQUE = 'MARTINIQUE'
    REUNION = 'REUNION'
    MAYOTTE = 'MAYOTTE'

    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.METROPOLE,
                self.tr('Metropole - EPSG:2154'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.GUADELOUPE,
                self.tr('Guadeloupe [971] - EPSG:5490)'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True,
                defaultValue=''
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.MARTINIQUE,
                self.tr('Martinique [972] - EPSG:5490'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True,
                defaultValue=''
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.GUYANE,
                self.tr('Guyane [973] - EPSG:2972'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True,
                defaultValue=''
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.REUNION,
                self.tr('Reunion [974] - EPSG:2975'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True,
                defaultValue=''
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.MAYOTTE,
                self.tr('Mayotte [976] - EPSG:4471'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True,
                defaultValue=''
            )
        )

        # Output vector

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer'),
                type=QgsProcessing.TypeVectorPolygon
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        feedback.pushInfo(" ")
        feedback.pushInfo("Rapprochement des departements francais")


        # metropole = self.parameterAsSource(parameters, self.METROPOLE, context).materialize(QgsFeatureRequest())
        # guadeloupe = self.parameterAsSource(parameters, self.GUADELOUPE, context).materialize(QgsFeatureRequest())
        # martinique = self.parameterAsSource(parameters, self.MARTINIQUE, context).materialize(QgsFeatureRequest())
        # guyane = self.parameterAsSource(parameters, self.GUYANE, context).materialize(QgsFeatureRequest())
        # reunion = self.parameterAsSource(parameters, self.REUNION, context).materialize(QgsFeatureRequest())
        # mayotte = self.parameterAsSource(parameters, self.MAYOTTE, context).materialize(QgsFeatureRequest())

        layerList = []

        if self.parameterAsSource(parameters, self.METROPOLE, context) :
            metropole = self.parameterAsSource(parameters, self.METROPOLE, context).materialize(QgsFeatureRequest())

            metropole = processing.run("native:reprojectlayer",
                           {'INPUT': metropole,
                            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:2154'), 'OUTPUT': 'TEMPORARY_OUTPUT'})

            path = os.path.dirname(__file__) + '/layers/empriseCorse.gpkg|layername=empriseCorse'

            corse = processing.run("native:extractbylocation", {
                'INPUT':metropole['OUTPUT'],
                'PREDICATE':[0],
                'INTERSECT':path,
                'OUTPUT':'TEMPORARY_OUTPUT'})

            # corse1664 = processing.run("native:translategeometry", {'INPUT':corse['OUTPUT'],
            #                                                         'DELTA_X':-166400,
            #                                                         'DELTA_Y':0,
            #                                                         'DELTA_Z':0,
            #                                                         'DELTA_M':0,
            #                                                         'OUTPUT':'memory:'})

            corse1664 = processing.run("saga:transformvectorlayer", {
                'IN': corse['OUTPUT'],
                'DX': -166400, 'DY': 0, 'ANGLE': 0,
                'SCALEX': 1, 'SCALEY': 1,
                'ANCHORX': 0, 'ANCHORY': 0,
                'OUT': 'TEMPORARY_OUTPUT'})

            continent = processing.run("native:extractbylocation", {
                'INPUT':metropole['OUTPUT'],
                'PREDICATE':[2],
                'INTERSECT':path,
                'OUTPUT':'TEMPORARY_OUTPUT'})

            # contourne le problème de modification des types réalisée par Saga !
            continent = processing.run("saga:transformvectorlayer", {
                'IN': continent['OUTPUT'],
                'DX': 0, 'DY': 0, 'ANGLE': 0,
                'SCALEX': 1, 'SCALEY': 1,
                'ANCHORX': 0, 'ANCHORY': 0,
                'OUT': 'TEMPORARY_OUTPUT'})


            feedback.pushInfo('Corse OK')

            layerList.append(continent['OUT'])
            layerList.append(corse1664['OUT'])

        domTransformation = {'guadeloupe' : (1.32,( -699983.0,   4269050.0)),
                             'martinique' : (1.85,(-1134525.0,   3517169.0)),
                             'guyane'     : (0.25,(  118687.0,   6286270.0)),
                             'reunion'    : (1.75,( -422169.0,  -7132230.0)),
                             'mayotte'    : (2.45,(-1082300.0, -14868225.0))}

        listeDom = [('guadeloupe',self.parameterAsSource(parameters, self.GUADELOUPE, context)),
                    ('martinique',self.parameterAsSource(parameters, self.MARTINIQUE, context)),
                    ('guyane',self.parameterAsSource(parameters, self.GUYANE, context)),
                    ('reunion',self.parameterAsSource(parameters, self.REUNION, context)),
                    ('mayotte',self.parameterAsSource(parameters, self.MAYOTTE, context))]

        for dom in listeDom:
            if dom[1]:
                domLayer = dom[1].materialize(QgsFeatureRequest())
                feedback.pushInfo('dom : {0}'.format(dom[0]))
                feedback.pushInfo('dom : {0}'.format(domTransformation[dom[0]]))
                transformation = domTransformation[dom[0]]

                domLamb93 = processing.run("native:assignprojection", {
                    'INPUT': domLayer,
                    'CRS': QgsCoordinateReferenceSystem('EPSG:2154'),
                    'OUTPUT': 'TEMPORARY_OUTPUT'})

                domZoom = processing.run("saga:transformvectorlayer", {
                    'IN': domLamb93['OUTPUT'],
                    'DX': 0, 'DY': 0, 'ANGLE': 0,
                    'SCALEX': transformation[0], 'SCALEY': transformation[0],
                    'ANCHORX': 0, 'ANCHORY': 0,
                    'OUT': 'TEMPORARY_OUTPUT'})

                domRapprochee = processing.run("saga:transformvectorlayer", {
                    'IN': domZoom['OUT'],
                    'DX': transformation[1][0], 'DY': transformation[1][1], 'ANGLE': 0,
                    'SCALEX': 1, 'SCALEY': 1,
                    'ANCHORX': 0, 'ANCHORY': 0,
                    'OUT': 'TEMPORARY_OUTPUT'})

                feedback.pushInfo('{0} OK'.format(dom[0]))

                layerList.append(domRapprochee['OUT'])

        mergedLayer = processing.run("native:mergevectorlayers", {
            'LAYERS':layerList,
            'CRS':QgsCoordinateReferenceSystem('EPSG:2154'),
            'OUTPUT':'TEMPORARY_OUTPUT'})
            
        result = processing.run("qgis:deletecolumn", {
            'INPUT':mergedLayer['OUTPUT'],
            'COLUMN':['layer','path'],
            'OUTPUT':'TEMPORARY_OUTPUT'})

        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.MultiPolygon, QgsCoordinateReferenceSystem('EPSG:2154'))
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        return {self.OUTPUT: 'dest_id'}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'rapprochedep'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Rapprochement des departements francais')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('MetroDom')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'metrodom'

    def tr(self, string):
        return QCoreApplication.translate('RapprocheDepAlgorithmAlgorithm', string)

    def createInstance(self):
        return RapprocheDepAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/metrodom.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("<center><img src='{0}/images/metroDom.svg'></center> \
           <p> Permet de rapprocher la Corse ainsi que les départements et régions d’outre-mer du continent.</p>\
           <p> <b>Les fonds de carte sélectionnés doivent être compatibles entre eux (type de géométrie et attributs)<\b></p>\
           <p> Le résultat comprendra l’ensemble des territoires choisis dans un fond de carte unique utilisant le système de projection Lambert 93.</p>".format(os.path.dirname(__file__))) 

class ZoomParisAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    METROPOLE = 'METROPOLE'
    GUADELOUPE = 'GUADELOUPE'
    GUYANE = 'GUYANE'
    MARTINIQUE = 'MARTINIQUE'
    REUNION = 'REUNION'
    MAYOTTE = 'MAYOTTE'

    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.METROPOLE,
                self.tr('Metropole - EPSG:2154'),
                [QgsProcessing.TypeVectorPolygon],
                optional=True
            )
        )

        # Output vector

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Zoom Paris'),
                type=QgsProcessing.TypeVectorPolygon
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        feedback.pushInfo(" ")
        feedback.pushInfo("Zoom sur Paris et son entourage")

        metropole = self.parameterAsSource(parameters, self.METROPOLE, context).materialize(QgsFeatureRequest())
        analysisLayer =  self.parameterAsSource(parameters, self.METROPOLE, context)
        feedback.pushInfo("     • {0}  :  {1}".format(self.tr("fond metropole"),analysisLayer.sourceName()))
        # feedback(self.parameterAsSource(parameters, self.METROPOLE, context).sourceName)
        metropole = processing.run("native:reprojectlayer",
                       {'INPUT': metropole,
                        'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:2154'), 'OUTPUT': 'TEMPORARY_OUTPUT'})

        path = os.path.dirname(__file__) + '/layers/empriseParis.gpkg|layername=empriseParis'

        grandParis = processing.run("native:extractbylocation", {
            'INPUT':metropole['OUTPUT'],
            'PREDICATE':[0],
            'INTERSECT':path,
            'OUTPUT':'TEMPORARY_OUTPUT'})


        zoomParis = processing.run("saga:transformvectorlayer", {
            'IN': grandParis['OUTPUT'],
            'DX':  0, 'DY': 0, 'ANGLE': 0,
            'SCALEX': 2.78, 'SCALEY': 2.78,
            'ANCHORX': 0, 'ANCHORY': 0,
            'OUT': 'TEMPORARY_OUTPUT'})

        translationParis = processing.run("saga:transformvectorlayer", {
            'IN': zoomParis['OUT'],
            'DX': -1634506.0 , 'DY': -12046235.0 , 'ANGLE': 0,
            'SCALEX': 1, 'SCALEY': 1,
            'ANCHORX': 0, 'ANCHORY': 0,
            'OUT': 'TEMPORARY_OUTPUT'})

        path = os.path.dirname(__file__) + '/layers/zoomParis.gpkg|layername=zoomParis'

        result = processing.run("native:clip", {
            'INPUT':translationParis['OUT'],
            'OVERLAY':path,
            'OUTPUT':'TEMPORARY_OUTPUT'})

        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.MultiPolygon, QgsCoordinateReferenceSystem('EPSG:2154'))
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        return {self.OUTPUT: 'dest_id'}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'zoomparis'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Zoom sur Paris et son entourage')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('MetroDom')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'metrodom'

    def tr(self, string):
        return QCoreApplication.translate('ZoomParisAlgorithm', string)

    def createInstance(self):
        return ZoomParisAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/zoomParis.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("<center><img src='{0}/images/zoomParis.svg' ></center> \
           <p> Permet d’extraire un zoom centré sur Paris et ses départements limitrophes.</p>\
           <p> <b>Le fond de carte en entrée doit utiliser le système de projection Lambert 93.<\b></p>".format(os.path.dirname(__file__))) 
          
