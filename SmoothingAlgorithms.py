# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication
from qgis.PyQt.QtCore import QVariant
import os, math
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProject,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorLayer,
                       QgsCoordinateReferenceSystem,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink,
                       QgsFeatureRequest,
                       QgsField,
                       QgsVectorLayer,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterField,
                       QgsProcessingParameterString,
                       QgsVectorFileWriter,
                       QgsProcessingParameterFile,
                       QgsWkbTypes,
                       QgsProcessingParameterDefinition,
                       QgsFeature,
                       QgsProcessingUtils,
                       QgsSymbol,
                       QgsCategorizedSymbolRenderer,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory)
import processing
import tempfile
import shutil
import re
import os.path
import os
from sys import platform
import subprocess
import locale
from qgis.utils import iface
import configparser

# --------------------------- #
# Create a grid from a layer  #
# --------------------------- #

class CreateBtbGridAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    CELL_SIZE = 'CELL_SIZE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input polygon layer'),
                [QgsProcessing.TypeVectorPolygon]
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Cell size (in meters)'),
                defaultValue=1000,
                minValue=1,
                optional=False
            )
        )
        
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("Grid output layer"), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsSource(parameters, self.INPUT, context)
        source2 = source.materialize(QgsFeatureRequest())
        crs = source2.crs().authid()
        
        CELL_SIZE = self.parameterAsInt( parameters, self.CELL_SIZE, context )
        # Layer extent
        layerExtent = source2.extent()
        xmin = (math.floor(layerExtent.xMinimum()/CELL_SIZE)*CELL_SIZE)
        ymin = (math.floor(layerExtent.yMinimum()/CELL_SIZE)*CELL_SIZE)
        xmax = (math.floor(layerExtent.xMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        ymax = (math.floor(layerExtent.yMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        
        # layerExtentList = [xmin,xmax,ymin,ymax]
        layerExtent = "{0},{1},{2},{3}".format(xmin,xmax,ymin,ymax)
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo(self.tr("Generating a btb grid"))
        feedback.pushInfo('')    
        feedback.pushInfo('     • '+self.tr('From the polygon layer')+' : {0}'.format(source.sourceName()))
        feedback.pushInfo('     • '+self.tr('Cell size')+' : {0} m'.format(CELL_SIZE))
        feedback.pushInfo('     • '+self.tr('Layer extent')+' : {0}'.format(layerExtent))
        feedback.pushInfo('     • '+self.tr('CRS')+' : {0}'.format(crs))
        
        grille = processing.run("qgis:creategrid", 
                        {'TYPE':2,
                         'EXTENT':layerExtent,
                         'HSPACING':CELL_SIZE,
                         'VSPACING':CELL_SIZE,
                         'HOVERLAY':0,
                         'VOVERLAY':0,
                         'CRS':crs,
                         'OUTPUT':'memory:'},
                         feedback=None)
        
        # Selection des carreaux utiles
        processing.run("native:selectbylocation", 
                {'INPUT':grille['OUTPUT'],
                 'PREDICATE':[0],
                 'INTERSECT':source2,
                 'METHOD':0},
                 feedback=None)
                            
        # On ne garde que les carreaux selectionnes
        result1 = processing.run("native:saveselectedfeatures", 
            {'INPUT':grille['OUTPUT'],
            'OUTPUT':'memory:'})
        # "     • classe {0}: {1}".format(i,classe)	
        # Ajout des colonnes ID, x et y
        result2 = processing.run("qgis:refactorfields", 
                        {'INPUT':result1['OUTPUT'],
                             'FIELDS_MAPPING':[{'expression': 'to_string(to_int("left" +{0}))|| \'_\' || to_string(to_int("bottom"+{0}))'.format(int(CELL_SIZE/2)), 
                                 'length': 25, 
                                 'name': 'ID', 
                                 'precision': 0, 
                                 'type': 10}, 
                             {'expression': 'left+{0}'.format(int(CELL_SIZE/2)),
                                 'length': 24, 
                                 'name': 'x', 
                                 'precision': 0, 
                                 'type': 2}, 
                             {'expression': 'bottom+{0}'.format(int(CELL_SIZE/2)), 
                                 'length': 24, 
                                 'name': 'y', 
                                 'precision': 0, 
                                 'type': 2}],
                         'OUTPUT':'memory:'},
                         feedback=None)
                         
        feedback.pushDebugInfo(self.tr("Loading the grid..."))
        feedback.pushInfo('')
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())  

        features = result2['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
                         
        
        return {self.OUTPUT: 'dest_id'}
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'btbgrid'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Create a grid for btb smoothing from a polygon layer")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Grids and smoothing')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('CreateBtbGridAlgorithm', string)

    def createInstance(self):
        return CreateBtbGridAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid0.png')

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("<center><img src='{0}/images/helper/grillebtb_h.png' ></center> \
           <p> Génère une grille utilisable avec le package btb de R permettant de réaliser des lissages.</p>\
           <p> Le <b>fond  entrée </b> délimite l’emprise de la grille à générer</p>\
           <p> La <b>maille de carreaux</b> est définie par défaut à 1 000 mètres.".format(os.path.dirname(__file__))) 

# ----------------------------- #
# Smooth datas to a grid layer  #
# ----------------------------- #

class SmoothToGridAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    X_COORDINATE = 'X_COORDINATE'
    Y_COORDINATE = 'Y_COORDINATE'
    VAR_LIST= 'VAR_LIST'
    CELL_SIZE = 'CELL_SIZE'
    BANDWIDTH = 'BANDWIDTH'
    GRID = 'GRID'
    QUANTILE_LIST = 'QUANTILE_LIST'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input datas (layer or table)'),
                [QgsProcessing.TypeVector]
            )
        )
        self.addParameter(QgsProcessingParameterField(
                self.X_COORDINATE,
                self.tr('X'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                optional = True
            )
        )
        self.addParameter(QgsProcessingParameterField(
                self.Y_COORDINATE,
                self.tr('Y'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                optional = True
            )
        )

        self.addParameter(QgsProcessingParameterField(
                self.VAR_LIST,
                self.tr('Values to smooth'),
                None, 
                self.INPUT, 
                QgsProcessingParameterField.Numeric, 
                True
            )
        )
        self.addParameter(QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Cell size (in meters)'),
                defaultValue=1000,
                minValue = 1,
                optional=False
            )
        )
        self.addParameter(QgsProcessingParameterNumber(
                self.BANDWIDTH,
                self.tr('Smothing radius (in meters)'),
                defaultValue=15000,
                minValue = 1,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFile(
                self.GRID,
                self.tr('Empty grid'),
                optional = True
            )
        )        
        params = []
        params.append(
            QgsProcessingParameterString(
                self.QUANTILE_LIST,
                self.tr('Percentile vector to calculate (example: 0.1;0.25;0.5)'),
                optional=True
            )
        )
        for param in params:
            param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
            self.addParameter(param)
        

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Smoothed grid')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # codecNomsFichiers = locale.getpreferredencoding()
                
        feedback.pushInfo(" ")
        feedback.pushInfo("BTB smoothing (with R and btb package) ")                
        
        # emplacement de R
        config = configparser.ConfigParser()
        config.read(re.sub('\\\\','/',os.path.dirname(__file__)) + '/thematic.cfg')

        RFolder = config['R']['R_FOLDER']
        feedback.pushInfo("      • emplacement de R : {0}".format(RFolder))
        
        if platform == 'win32':
            execDir = 'x64'
            command = [RFolder+'/bin/x64/Rscript.exe','-e' ,'getRversion()']
        else:
            command = ['R --version']
 
        proc = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stdin=open(os.devnull),
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        stdout, stderr  = proc.communicate()
        versionR = re.findall("'(\d.+)'",stdout)[0]        

        feedback.pushInfo('     • {0} : {1}'.format(self.tr("R version"),versionR))
        feedback.pushInfo(" ")        
                
        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        grid = self.parameterAsString(parameters, self.GRID, context)
        x =  self.parameterAsString(parameters, self.X_COORDINATE, context)
        y =  self.parameterAsString(parameters, self.Y_COORDINATE, context)
        quantileList = self.parameterAsString(parameters, self.QUANTILE_LIST, context)

        dirpath = tempfile.mkdtemp()
        sortie = str(re.sub('\\\\','/',dirpath) + "/output.csv")
        
        # sortieLissage = str(re.sub('\\\\','/',dirpath) + "/lissage.csv")
     

        varList = self.parameterAsFields(parameters,self.VAR_LIST,context)
        varIndex = [source.fields().indexOf(item) for item in varList]
        fieldList = [source.fields().toList()[item] for item in varIndex]
        
        fieldList.append((QgsField("x", QVariant.Double)))
        fieldList.append((QgsField("y", QVariant.Double)))


            
        # QgsVectorFileWriter.writeAsVectorFormat(vl, sortie, "utf8", source.crs(), "CSV")

        out_file = open(sortie, "wt")
        out_file.write('x,y,'+",".join(varList ) + "\n")
        for elem in source.getFeatures():
            attributes = []
            if x != '' and x != '':
                attributes.append(float(elem.attributes()[source.fields().indexOf(x)]))
                attributes.append(float(elem.attributes()[source.fields().indexOf(y)]))                 
            else:
                centroid = elem.geometry().centroid().asPoint()            
                attributes.append(elem.geometry().centroid().asPoint()[0])
                attributes.append(elem.geometry().centroid().asPoint()[1])
            for i in varIndex:
                attributes.append(elem.attributes()[i] or 0)
            out_file.write(str(attributes)[1:-1].replace(" ","") + "\n")
               
        out_file.close()
        
        # emplacement du script R
        
        RlibFolder = re.sub('\\\\','/',os.path.dirname(__file__)) + "/rlib"
        
        if quantileList =='' :
            quantileList = 'NULL'

        

        if grid != '':
            feedback.pushInfo('     • '+self.tr("Empty grid defined")+" :    {0}".format(grid))
        else:
            feedback.pushInfo('     • '+self.tr("No empty grid used"))
        cellsize = self.parameterAsInt(parameters,self.CELL_SIZE,context)
        bandwidth = self.parameterAsInt(parameters,self.BANDWIDTH,context)
        feedback.pushInfo('     • '+self.tr("Values to smooth")+" :    {0}".format(varList))
        feedback.pushInfo('     • '+self.tr("Cell size")+" :    {0} m".format(cellsize))
        feedback.pushInfo('     • '+self.tr("Smoothing radius")+" :    {0} m".format(bandwidth))
        if quantileList != 'NULL':
            feedback.pushInfo('     • '+self.tr("Pertentile to calculate")+" :    {0}".format(quantileList))
        else:
            feedback.pushInfo('     • '+self.tr("No percentile"))
        feedback.pushInfo(" ")
        if grid != '':
            scriptR = re.sub('\\\\','/',os.path.dirname(__file__)) + '/rscript/lissageGrille.R'
            crsString = QgsProject.instance().crs().authid()
            crsCode = str(crsString.split(':')[1])                                                            
            sortieLissage = str(re.sub('\\\\','/',dirpath) + "/lissage.gpkg")
            args = [sortie, str(cellsize), str(bandwidth), quantileList, crsCode, grid,sortieLissage, RlibFolder]
            command = [RFolder+'/bin/x64/Rscript.exe','--vanilla',scriptR]+args
            feedback.pushInfo('     • {0} :\n{1}'.format(self.tr("Command"),command))
            
            proc = subprocess.run(
                command,
                shell=True, check=False
            )
            
            result = processing.run("native:fixgeometries", 
                                    {'INPUT':sortieLissage,
                                    'OUTPUT':'memory:'})
        else:
            scriptR = re.sub('\\\\','/',os.path.dirname(__file__)) + '/rscript/schematisation.R'
            crsString = QgsProject.instance().crs().authid()
            feedback.pushInfo('     • {0} :\n{1}'.format(self.tr("crsString"),crsString))
            crsCode = str(crsString.split(':')[1])
            sortieLissage = str(re.sub('\\\\','/',dirpath) + "/lissage.gpkg")
            args = [sortie, str(cellsize), str(bandwidth), quantileList, crsCode,sortieLissage, RlibFolder]
            command = [RFolder+'/bin/x64/Rscript.exe',scriptR]+args
            feedback.pushInfo('     • {0} :\n{1}'.format(self.tr("Command"),command))
            proc = subprocess.run(
                command,
                shell=True, check=False
            )
            
            result = processing.run("native:fixgeometries", 
                                    {'INPUT':sortieLissage,
                                    'OUTPUT':'memory:'})

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                    context, result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].sourceCrs())
        features = result['OUTPUT'].getFeatures()
        
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert) 
        # shutil.rmtree(dirpath)
        
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothtogrid'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('BTB smoothing algorithm (with R + btb package)')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Grids and smoothing')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('SmoothToGridAlgorithm', string)

    def createInstance(self):
        return SmoothToGridAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid.png')


class CreateInspireGridAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    EXTENT = 'EXTENT'    
    CELL_SIZE = 'CELL_SIZE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input polygon layer'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )
        
        self.extentList = [ 'France métropolitaine / Europe - ETRS-LAEA - EPSG:3035', 
                            'Guadeloupe et Martinique - UTM 20N - EPSG:5490',
                            'La Réunion - UTM 40S - EPSG:2975', 
                            'Guyane - UTM 22N - EPSG:2972', 
                            'Mayotte - UTM 38S - EPSG:4471', 
                            'Saint-Pierre-et-Miquelon - UTM 21N - EPSG:4467']
        self.addParameter(
            QgsProcessingParameterEnum(
                self.EXTENT,
                self.tr('Location'),
                options=self.extentList
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Cell size (in meters)'),
                defaultValue=1000,
                minValue=1,
                optional=False
            )
        )
        
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("Inspire grid output layer"), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsSource(parameters, self.INPUT, context)
        source2 = source.materialize(QgsFeatureRequest())
        crs = source2.crs().authid()
        extentZone = str(self.parameterAsString(parameters, self.EXTENT , context))
        CELL_SIZE = self.parameterAsInt( parameters, self.CELL_SIZE, context )
        
        crsList = {"0": "3035", "1": "5490", "2":"2975", "3":"2972", "4":"4471", "5":"4467", "6":"4467"}
        crsCode = crsList[extentZone]
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo(self.tr("Generate an Inspire grid"))
        feedback.pushInfo('')    
        feedback.pushInfo('     • {0} : {1}'.format(self.tr('From the polygon layer'),source.sourceName()))
        feedback.pushInfo('     • {0} : {1} m'.format(self.tr('Cell size'),CELL_SIZE))
        
        temp1 = processing.run("native:reprojectlayer", 
                    {'INPUT':source2,
                    'TARGET_CRS':QgsCoordinateReferenceSystem('EPSG:'+crsCode),
                    'OUTPUT':'memory:'},
                     feedback=None)

        layerExtent = temp1['OUTPUT'].extent()    

        # Layer extent
        # layerExtent = source2.extent()
        xmin = (math.floor(layerExtent.xMinimum()/CELL_SIZE)*CELL_SIZE)
        ymin = (math.floor(layerExtent.yMinimum()/CELL_SIZE)*CELL_SIZE)
        xmax = (math.floor(layerExtent.xMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        ymax = (math.floor(layerExtent.yMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        
        # layerExtentList = [xmin,xmax,ymin,ymax]
        layerExtent = "{0},{1},{2},{3}".format(xmin,xmax,ymin,ymax)
        
        feedback.pushInfo('     • '+self.tr('Layer extent')+' : {0}'.format(layerExtent))
        feedback.pushInfo('     • '+self.tr('EPSG zone')+' : {0}'.format(crsCode))
        feedback.pushInfo('')

        
        # Creation de la grille
        feedback.pushDebugInfo(self.tr("Generating an Inspire grid..."))
        grille = processing.run("qgis:creategrid", 
                        {'TYPE':2,
                         'EXTENT':layerExtent,
                         'HSPACING':CELL_SIZE,
                         'VSPACING':CELL_SIZE,
                         'HOVERLAY':0,
                         'VOVERLAY':0,
                         'CRS':'EPSG:'+crsCode,
                         'OUTPUT':'memory:'},
                         feedback=None)


        # Selection des carreaux utiles
        feedback.pushDebugInfo(self.tr("Grid cleaning..."))
        processing.run("native:selectbylocation", 
                        {'INPUT':grille['OUTPUT'],
                         'PREDICATE':[0],
                         'INTERSECT':temp1['OUTPUT'],
                         'METHOD':0},
                         feedback=None)

        # On ne garde que les carreaux selectionnes
        result1 = processing.run("native:saveselectedfeatures", 
            {'INPUT':grille['OUTPUT'],
            'OUTPUT':'memory:'})
        
            
        refactorfieldsExpression = "'CRS" + crsCode + "RES"+ str(CELL_SIZE) + "mN'" + ' + to_string("bottom") + ' + "'E'" + ' + to_string("left")' 
        refactorfieldsExpression_1k = "'CRS" + crsCode + "RES"+ str('1000') + "mN'" + ' + to_string(1000*to_int(floor("bottom"/1000))) + ' + "'E'" + ' + to_string(1000*to_int(floor("left"/1000)))' 
        
        # Ajout des colonnes ID, x et y
        feedback.pushDebugInfo(self.tr("Add Inspire ID..."))
        result2 = processing.run("qgis:refactorfields", 
                        {'INPUT':result1['OUTPUT'],
                             'FIELDS_MAPPING':[
                                {'expression': refactorfieldsExpression, 
                                 'length': 30, 
                                 'name': 'idINSPIRE', 
                                 'precision': 0, 
                                 'type': 10},
                                {'expression': refactorfieldsExpression_1k, 
                                 'length': 31, 
                                 'name': 'id_carr_1km', 
                                 'precision': 0, 
                                 'type': 10}],
                                 'OUTPUT':'memory:'},
                                 feedback=feedback)
                                 
        feedback.pushDebugInfo(self.tr("Grid loading..."))
        feedback.pushInfo('')
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())  

        features = result2['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
            
        return {self.OUTPUT: 'dest_id'}
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'inspiregrid'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Create an Inspire grid from a polygon layer")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Grids and smoothing')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('CreateInspireGridAlgorithm', string)

    def createInstance(self):
        return CreateInspireGridAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid0.png')
    
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("<center><img src='{0}/images/helper/grilleInspire_h.png' ></center> \
           <p> Génère une grille compatible avec les données carroyées Eurostat et Insee.</p>\
           <p>La <b>localisation</b> permettra de générer une grille dans la projection telle que définie dans la norme Insipire pour le carroyage (EPSG:3035 pour la partie continentale de l’Union Européenne)</p> \
           <p> La <b>maille de carreaux</b> est définie par défaut à 1 000 mètres.".format(os.path.dirname(__file__))) 


class DissolveAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    CELL_SIZE = 'CELL_SIZE'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Smoothed grid cell size (in meters)'),
                defaultValue=1000,
                minValue=1,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr("Contour of the smoothed zone"),
                [QgsProcessing.TypeVectorPolygon],
                optional = True
            )
        ) 
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("grouped cells layer"), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = iface.activeLayer()
        type = source.renderer().type()
        if type != 'graduatedSymbol':
            try:
                raise NameError("InputError")
            except:
                feedback.pushInfo(" ")
                feedback.reportError("     • {0} !…".format(self.tr("Layer not catogorised")))
                feedback.pushInfo(" ")
                raise
        else:        
            crs = source.crs().authid()
            contour = self.parameterAsSource(parameters, self.INPUT, context)
            # feedback.pushInfo("contour : {0}".format(contour.sourceName()))
            
            CELL_SIZE = self.parameterAsInt( parameters, self.CELL_SIZE, context )
            # Layer extent
            layerExtent = source.extent()
            xmin = (math.floor(layerExtent.xMinimum()/CELL_SIZE)*CELL_SIZE)
            ymin = (math.floor(layerExtent.yMinimum()/CELL_SIZE)*CELL_SIZE)
            xmax = (math.floor(layerExtent.xMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
            ymax = (math.floor(layerExtent.yMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
            
            # layerExtentList = [xmin,xmax,ymin,ymax]
            layerExtent = "{0},{1},{2},{3} [{4}]".format(xmin,xmax,ymin,ymax,crs)
            feedback.pushInfo('____________________')
            feedback.pushInfo('')
            feedback.pushInfo(self.tr("Cell grouping after btb smoothing"))
            feedback.pushInfo('')    
            feedback.pushInfo('     • {0} : {1}'.format(self.tr("Smoothed grid"),source.sourceName()))
            feedback.pushInfo('     • {0} : {1} m'.format(self.tr("Cell size"),CELL_SIZE))
            feedback.pushInfo('     • {0} : {1}'.format(self.tr("Layer extent"),layerExtent))
            feedback.pushInfo('     • {0} : {1}'.format(self.tr("CRS"),crs))
            
            # 
            variable = source.renderer().classAttribute()
            feedback.pushInfo('     • {0} : {1}'.format(self.tr("Value"),variable))


        
            feedback.pushInfo('     • {0} : {1}'.format(self.tr("Type"),type))
            
            formula = 'CASE '
            i = 1
            self.classes = []
            for item in source.renderer().ranges():
                formula += 'WHEN {0} >= {1} and {0} <= {2} then {3} \n'.format(variable,item.lowerValue(),item.upperValue(),i)
                # bornes = (item.upperValue(), item.lowerValue(), item.label())
                self.classes.append((item.label(),item.symbol().color().name()))
                i += 1
            formula += 'END'
            # feedback.pushInfo(self.tr('     • classes : \n{0}'.format(self.classes)))
            # feedback.pushInfo(self.tr('     • formula : \n{0}'.format(formula)))
            result = processing.run("qgis:refactorfields", 
                    {'INPUT': source,
                     'FIELDS_MAPPING':[
                        {'expression': '{0}'.format(formula), 
                         'length': 1, 
                         'name': 'CLASSE', 
                         'precision': 0, 
                         'type': 2
                        }],
                     'OUTPUT':'memory:'},
                         feedback = None)
                         
            dirpath = tempfile.mkdtemp()
            self.dirpath = dirpath
            sortie = str(re.sub('\\\\','/',dirpath) + "/raster.tif")
            
            raster = processing.run("gdal:rasterize", 
                    {'INPUT':result['OUTPUT'],
                     'FIELD':'CLASSE',
                     'BURN':0,
                     'UNITS':1,
                     'WIDTH':CELL_SIZE,
                     'HEIGHT':CELL_SIZE,
                     'EXTENT':layerExtent,
                     'NODATA':0,
                     'OPTIONS':'',
                     'DATA_TYPE':5,
                     'INIT':None,
                     'INVERT':False,
                     'OUTPUT':sortie},
                         feedback = None)
            vectorLayer = str(re.sub('\\\\','/',dirpath) + "/vecteur.gpkg")
            
            smoothedLayer = processing.run("grass7:r.to.vect", 
                    {'input':raster['OUTPUT'],
                     'type':2,
                     'column':'value',
                     '-s':True,
                     '-v':False,
                     '-z':False,
                     '-b':False,
                     '-t':False,
                     'output':vectorLayer,
                     'GRASS_REGION_PARAMETER':None,
                     'GRASS_REGION_CELLSIZE_PARAMETER':CELL_SIZE,
                     'GRASS_OUTPUT_TYPE_PARAMETER':0,
                     'GRASS_VECTOR_DSCO':'',
                     'GRASS_VECTOR_LCO':'',
                     'GRASS_VECTOR_EXPORT_NOCAT':False},
                         feedback = None)
                         
            fixedGeometries = processing.run("native:fixgeometries", 
                    {'INPUT':vectorLayer,
                     'OUTPUT':'memory:'},
                         feedback = None)
                         
            if contour is None:
                result = fixedGeometries        
            else:
                dissolvedContour = processing.run("native:dissolve", 
                        {'INPUT':contour.materialize(QgsFeatureRequest()),
                         'FIELD':[],
                         'OUTPUT':'memory:'},
                         feedback = None)
                
                result = processing.run("native:intersection", 
                        {'INPUT':fixedGeometries['OUTPUT'],
                         'OVERLAY':dissolvedContour['OUTPUT'],
                         'INPUT_FIELDS':[],
                         'OVERLAY_FIELDS':[],
                         'OUTPUT':'memory:'},
                         feedback = None)
                
            (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                                   result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].crs())  

            features = result['OUTPUT'].getFeatures()
            for feature in features:
                sink.addFeature(feature, QgsFeatureSink.FastInsert)
                             
            self.dest_id = dest_id
            # shutil.rmtree(dirpath)
            return {self.OUTPUT: 'dest_id'}
        
    def postProcessAlgorithm(self, context, feedback):
        # Styling the output
        output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        categories = []
        i = 1
        
        for classe in self.classes:
            feedback.pushInfo("     • classe {0}: {1}".format(i,classe))
            symbol = QgsSymbol.defaultSymbol(output0.geometryType())
            layer_style = {}
            layer_style['color'] = classe[1]
            layer_style['outline_style'] = 'no'
            symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
            if symbol_layer is not None:
                symbol.changeSymbolLayer(0, symbol_layer)
            category = QgsRendererCategory(i,symbol,classe[0])
            categories.append(category)
            i += 1
        
        renderer = QgsCategorizedSymbolRenderer('value', categories)
        if renderer is not None:
            output0.setRenderer(renderer)
        output0.triggerRepaint()
        shutil.rmtree(self.dirpath)
        return {self.OUTPUT: self.OUTPUT}
        
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'dissolve'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Cell grouping after btb smoothing")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Grids and flows')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('DissolveAlgorithm', string)

    def createInstance(self):
        return DissolveAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid2.png')

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("<center><img src='{0}/images/helper/regroupement_lissage_h.png' ></center> \
           <p> Regroupe les carreaux du fond  lissé actif en reprenant les classes affichées</p>\
           <p>Indiquer la <b>maille de la grille lissée</p>\
           <p><b>Le contour de lissage</b> permet de découper le bord du fond lissé selon le contour du territoire".format(os.path.dirname(__file__)))  