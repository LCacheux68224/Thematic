# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication
from qgis.PyQt.QtCore import QVariant
import os, math
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProject,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorLayer,
                       QgsCoordinateReferenceSystem,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink,
                       QgsFeatureRequest,
                       QgsField,
                       QgsVectorLayer,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterField,
                       QgsProcessingParameterString,
                       QgsVectorFileWriter,
                       QgsProcessingParameterFile,
                       QgsWkbTypes,
                       QgsProcessingParameterDefinition,
                       QgsFeature,
                       QgsProcessingUtils,
                       QgsSymbol,
                       QgsCategorizedSymbolRenderer,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory)
import processing
import tempfile
import shutil
import re
import os.path
import os
from sys import platform
import subprocess
import locale
from qgis.utils import iface
# --------------------------- #
# Create a grid from a layer  #
# --------------------------- #

class CreateBtbGridAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    CELL_SIZE = 'CELL_SIZE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Fond en entrée'),
                [QgsProcessing.TypeVectorPolygon]
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Maille du carreau (en mètres)'),
                defaultValue=1000,
                minValue=1,
                optional=False
            )
        )
        
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("Grille BTB"), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsSource(parameters, self.INPUT, context)
        source2 = source.materialize(QgsFeatureRequest())
        crs = source2.crs().authid()
        
        CELL_SIZE = self.parameterAsInt( parameters, self.CELL_SIZE, context )
        # Layer extent
        layerExtent = source2.extent()
        xmin = (math.floor(layerExtent.xMinimum()/CELL_SIZE)*CELL_SIZE)
        ymin = (math.floor(layerExtent.yMinimum()/CELL_SIZE)*CELL_SIZE)
        xmax = (math.floor(layerExtent.xMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        ymax = (math.floor(layerExtent.yMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        
        # layerExtentList = [xmin,xmax,ymin,ymax]
        layerExtent = "{0},{1},{2},{3}".format(xmin,xmax,ymin,ymax)
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo(self.tr("Création d'une grille BTB"))
        feedback.pushInfo('')    
        feedback.pushInfo(self.tr('     • Contour : {0}'.format(source.sourceName())))
        feedback.pushInfo(self.tr('     • Maille : {0} m'.format(CELL_SIZE)))
        feedback.pushInfo(self.tr('     • Étendue de la couche : {0}'.format(layerExtent)))
        feedback.pushInfo(self.tr('     • SCR : {0}'.format(crs)))
        
        grille = processing.run("qgis:creategrid", 
                        {'TYPE':2,
                         'EXTENT':layerExtent,
                         'HSPACING':CELL_SIZE,
                         'VSPACING':CELL_SIZE,
                         'HOVERLAY':0,
                         'VOVERLAY':0,
                         'CRS':crs,
                         'OUTPUT':'memory:'},
                         feedback=None)
        
        # Selection des carreaux utiles
        processing.run("native:selectbylocation", 
                {'INPUT':grille['OUTPUT'],
                 'PREDICATE':[0],
                 'INTERSECT':source2,
                 'METHOD':0},
                 feedback=None)
                            
        # On ne garde que les carreaux selectionnes
        result1 = processing.run("native:saveselectedfeatures", 
            {'INPUT':grille['OUTPUT'],
            'OUTPUT':'memory:'})

        # Ajout des colonnes ID, x et y
        result2 = processing.run("qgis:refactorfields", 
                        {'INPUT':result1['OUTPUT'],
                             'FIELDS_MAPPING':[{'expression': 'to_string(to_int("left" +500))|| \'_\' || to_string(to_int("bottom"+500))', 
                                 'length': 25, 
                                 'name': 'ID', 
                                 'precision': 0, 
                                 'type': 10}, 
                             {'expression': 'left+500',
                                 'length': 24, 
                                 'name': 'x', 
                                 'precision': 0, 
                                 'type': 2}, 
                             {'expression': 'bottom+500', 
                                 'length': 24, 
                                 'name': 'y', 
                                 'precision': 0, 
                                 'type': 2}],
                         'OUTPUT':'memory:'},
                         feedback=None)
                         
        feedback.pushDebugInfo(self.tr("Chargement de la grille..."))
        feedback.pushInfo('')
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())  

        features = result2['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
                         
        
        return {self.OUTPUT: 'dest_id'}
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'btbgrid'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Générer une grille de lissage BTB à partir d'un contour")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Carroyage et lissage')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateBtbGridAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid0.png')


# ----------------------------- #
# Smooth datas to a grid layer  #
# ----------------------------- #

class SmoothToGridAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    X_COORDINATE = 'X_COORDINATE'
    Y_COORDINATE = 'Y_COORDINATE'
    VAR_LIST= 'VAR_LIST'
    CELL_SIZE = 'CELL_SIZE'
    BANDWIDTH = 'BANDWIDTH'
    GRID = 'GRID'
    QUANTILE_LIST = 'QUANTILE_LIST'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Fond ou table de données en entrée'),
                [QgsProcessing.TypeVector]
            )
        )
        self.addParameter(QgsProcessingParameterField(
                self.X_COORDINATE,
                self.tr('X'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                optional = True
            )
        )
        self.addParameter(QgsProcessingParameterField(
                self.Y_COORDINATE,
                self.tr('Y'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                optional = True
            )
        )

        self.addParameter(QgsProcessingParameterField(
                self.VAR_LIST,
                self.tr('Liste des variables à lisser'),
                None, 
                self.INPUT, 
                QgsProcessingParameterField.Numeric, 
                True
            )
        )
        self.addParameter(QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Taille des carreaux (en m)'),
                defaultValue=1000,
                minValue = 1,
                optional=False
            )
        )
        self.addParameter(QgsProcessingParameterNumber(
                self.BANDWIDTH,
                self.tr('Rayon de lissage (en m)'),
                defaultValue=15000,
                minValue = 1,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFile(
                self.GRID,
                self.tr('Grille Shapefile prédéfinie'),
                optional = True
            )
        )        
        params = []
        params.append(
            QgsProcessingParameterString(
                self.QUANTILE_LIST,
                self.tr('Liste des quantiles à calculer (exemple: 0.1;0.25;0.5)'),
                optional=True
            )
        )
        for param in params:
            param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
            self.addParameter(param)
        

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Grille lissée')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # codecNomsFichiers = locale.getpreferredencoding()
        
        if platform == 'win32':
            execDir = 'x64'
            command = ['C:/Program Files/R/R-3.3.3/bin/Rscript.exe','-e' ,'getRversion()']
        else:
            command = ['R --version']
 
        proc = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stdin=open(os.devnull),
            stderr=subprocess.STDOUT,
            universal_newlines=True,
        )
        stdout, stderr  = proc.communicate()
        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        grid = self.parameterAsString(parameters, self.GRID, context)
        x =  self.parameterAsString(parameters, self.X_COORDINATE, context)
        y =  self.parameterAsString(parameters, self.Y_COORDINATE, context)
        quantileList = self.parameterAsString(parameters, self.QUANTILE_LIST, context)

        dirpath = tempfile.mkdtemp()
        sortie = str(re.sub('\\\\','/',dirpath) + "/output.csv")
        
        # sortieLissage = str(re.sub('\\\\','/',dirpath) + "/lissage.csv")
     

        varList = self.parameterAsFields(parameters,self.VAR_LIST,context)
        varIndex = [source.fields().indexOf(item) for item in varList]
        fieldList = [source.fields().toList()[item] for item in varIndex]
        
        fieldList.append((QgsField("x", QVariant.Double)))
        fieldList.append((QgsField("y", QVariant.Double)))


            
        # QgsVectorFileWriter.writeAsVectorFormat(vl, sortie, "utf8", source.crs(), "CSV")

        out_file = open(sortie, "wt")
        out_file.write('x,y,'+",".join(varList ) + "\n")
        for elem in source.getFeatures():
            attributes = []
            if x != '' and x != '':
                attributes.append(float(elem.attributes()[source.fields().indexOf(x)]))
                attributes.append(float(elem.attributes()[source.fields().indexOf(y)]))                 
            else:
                centroid = elem.geometry().centroid().asPoint()            
                attributes.append(elem.geometry().centroid().asPoint()[0])
                attributes.append(elem.geometry().centroid().asPoint()[1])
            for i in varIndex:
                attributes.append(elem.attributes()[i] or 0)
            out_file.write(str(attributes)[1:-1].replace(" ","") + "\n")
               
        out_file.close()
        
        # emplacement du script R
        
        RlibFolder = re.sub('\\\\','/',os.path.dirname(__file__)) + "/rlib"
        
        if quantileList =='' :
            quantileList = 'NULL'

        command = ['C:/Program Files/R/R-3.3.3/bin/x64/Rscript.exe','-e' ,'getRversion()']

        proc = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stdin=open(os.devnull),
            stderr=subprocess.STDOUT,
            universal_newlines=True,
        )
        stdout, stderr  = proc.communicate()  
        versionR = re.findall("'(\d.+)'",stdout)[0]
        
        feedback.pushInfo(" ")
        feedback.pushInfo("Lissage BTB (Package R - Beyond The Border) ")
        
        feedback.pushInfo("      • version de R :    {0}".format(versionR))
        feedback.pushInfo(" ")
        if grid != '':
            feedback.pushInfo("      • Grille prédéfinie:    {0}".format(grid))
        else:
            feedback.pushInfo("      • Pas de grille prédéfinie")
        cellsize = self.parameterAsInt(parameters,self.CELL_SIZE,context)
        bandwidth = self.parameterAsInt(parameters,self.BANDWIDTH,context)
        feedback.pushInfo("      • liste des variables à lisser:    {0}".format(varList))
        feedback.pushInfo("      • Maille :    {0} m".format(cellsize))
        feedback.pushInfo("      • Rayon de lissage :    {0} m".format(bandwidth))
        if quantileList != 'NULL':
            feedback.pushInfo("      • Liste des quantiles :    {0}".format(quantileList))
        else:
            feedback.pushInfo("      • Pas de quantiles demandés")
        feedback.pushInfo(" ")
        if grid != '':
            scriptR = re.sub('\\\\','/',os.path.dirname(__file__)) + '/rscript/lissageGrille.R'
            sortieLissage = str(re.sub('\\\\','/',dirpath) + "/lissage.csv")
            args = [sortie, str(cellsize), str(bandwidth), quantileList, re.sub('\.shp','.dbf',grid),sortieLissage, RlibFolder]
            command = ['C:/Program Files/R/R-3.3.3/bin/x64/Rscript.exe','--vanilla',scriptR]+args
            feedback.pushInfo("      • commande :\n{0}".format(command))
            
            proc = subprocess.run(
                command,
                shell=True, check=False
            )
            
            filepath = sortieLissage
            with open(filepath) as fp:
                line = fp.readline()
            fp.close()
            
            varList2 = line.replace('"',"").split(',')[3:-1] 
            
            result = processing.run("native:joinattributestable", 
                    {'INPUT':grid,
                     'FIELD':'ID',
                     'INPUT_2':sortieLissage,
                     'FIELD_2':'ID',
                     'FIELDS_TO_COPY':varList2,
                     'METHOD':1,'DISCARD_NONMATCHING':False,
                     'PREFIX':'',
                     'OUTPUT':'memory:'})
            
        else:
            scriptR = re.sub('\\\\','/',os.path.dirname(__file__)) + '/rscript/schematisation.R'
            crsString = QgsProject.instance().crs().authid()
            crsCode = str(crsString.split(':')[1])
            sortieLissage = str(re.sub('\\\\','/',dirpath) + "/lissage.csv")
            args = [sortie, str(cellsize), str(bandwidth), quantileList, crsCode,sortieLissage, RlibFolder]
            command = ['C:/Program Files/R/R-3.3.3/bin/x64/Rscript.exe','--vanilla',scriptR]+args
            feedback.pushInfo("      • commande :\n{0}".format(command))
            proc = subprocess.run(
                command,
                shell=True, check=False
            )
            
            summaryX = processing.run("qgis:basicstatisticsforfields", 
                            {'INPUT_LAYER':sortieLissage,
                                'FIELD_NAME':'x'
                            },
                            feedback = None)
            summaryY = processing.run("qgis:basicstatisticsforfields", 
                            {'INPUT_LAYER':sortieLissage,
                                'FIELD_NAME':'y'
                            },
                            feedback = None)
                            
            layerExtent = "{0},{1},{2},{3}".format(float(summaryX['MIN'])+cellsize/2,
                                                   float(summaryX['MAX'])-cellsize/2,
                                                   float(summaryY['MIN'])+cellsize/2,
                                                   float(summaryY['MAX'])-cellsize/2)
            
            grille = processing.run("qgis:creategrid", 
                            {'TYPE':2,
                             'EXTENT':layerExtent,
                             'HSPACING':cellsize,
                             'VSPACING':cellsize,
                             'HOVERLAY':0,
                             'VOVERLAY':0,
                             'CRS':crsString,
                             'OUTPUT':'memory:'},
                             feedback=None)
            
            # Ajout des colonnes ID, x et y
            result2 = processing.run("qgis:refactorfields", 
                            {'INPUT':grille['OUTPUT'],
                                 'FIELDS_MAPPING':[{'expression': 'to_string("left" +500)+\'_\'+to_string("bottom"+500)', 
                                     'length': 25, 
                                     'name': 'ID', 
                                     'precision': 0, 
                                     'type': 10}, 
                                 {'expression': 'left+500',
                                     'length': 24, 
                                     'name': 'x', 
                                     'precision': 0, 
                                     'type': 2}, 
                                 {'expression': 'bottom+500', 
                                     'length': 24, 
                                     'name': 'y', 
                                     'precision': 0, 
                                     'type': 2}],
                             'OUTPUT':'memory:'},
                             feedback=None)
                
            
            filepath = sortieLissage
            with open(filepath) as fp:
                line = fp.readline()
            fp.close()
            
            varList2 = line.replace('"',"").split(',')[3:-1] 
            
            result = processing.run("native:joinattributestable", 
                    {'INPUT':result2['OUTPUT'],
                     'FIELD':'ID',
                     'INPUT_2':sortieLissage,
                     'FIELD_2':'ID',
                     'FIELDS_TO_COPY':varList2,
                     'METHOD':1,'DISCARD_NONMATCHING':True,
                     'PREFIX':'',
                     'OUTPUT':'memory:'})

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                    context, result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].sourceCrs())
        features = result['OUTPUT'].getFeatures()
        
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert) 
        shutil.rmtree(dirpath)
        
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothtogrid'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Lissage BTB (Beyond the Border)')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Carroyage et lissage')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SmoothToGridAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid.png')


class CreateInspireGridAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    EXTENT = 'EXTENT'    
    CELL_SIZE = 'CELL_SIZE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Fond en entrée'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )
        
        self.extentList = [ 'Métropole - ETRS-LAEA - EPSG:3035', 
                            'Guadeloupe et Martinique - UTM 20N - EPSG:5490',
                            'La Réunion - UTM 40S - EPSG:2975', 
                            'Guyane - UTM 22N - EPSG:2972', 
                            'Mayotte - UTM 38S - EPSG:4471', 
                            'Saint-Pierre-et-Miquelon - UTM 21N - EPSG:4467']
        self.addParameter(
            QgsProcessingParameterEnum(
                self.EXTENT,
                self.tr('Localisation'),
                options=self.extentList
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Maille du carreau (en mètres)'),
                defaultValue=1000,
                minValue=1,
                optional=False
            )
        )
        
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("Grille Inspire"), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsSource(parameters, self.INPUT, context)
        source2 = source.materialize(QgsFeatureRequest())
        crs = source2.crs().authid()
        extentZone = str(self.parameterAsString(parameters, self.EXTENT , context))
        CELL_SIZE = self.parameterAsInt( parameters, self.CELL_SIZE, context )
        
        crsList = {"0": "3035", "1": "5490", "2":"2975", "3":"2972", "4":"4471", "5":"4467", "6":"4467"}
        crsCode = crsList[extentZone]
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo(self.tr("Création d'une grille Inspire"))
        feedback.pushInfo('')    
        feedback.pushInfo(self.tr('     • Contour : {0}'.format(source.sourceName())))
        feedback.pushInfo(self.tr('     • Maille : {0} m'.format(CELL_SIZE)))
        
        temp1 = processing.run("native:reprojectlayer", 
                    {'INPUT':source2,
                    'TARGET_CRS':QgsCoordinateReferenceSystem('EPSG:'+crsCode),
                    'OUTPUT':'memory:'},
                     feedback=None)

        layerExtent = temp1['OUTPUT'].extent()    

        # Layer extent
        # layerExtent = source2.extent()
        xmin = (math.floor(layerExtent.xMinimum()/CELL_SIZE)*CELL_SIZE)
        ymin = (math.floor(layerExtent.yMinimum()/CELL_SIZE)*CELL_SIZE)
        xmax = (math.floor(layerExtent.xMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        ymax = (math.floor(layerExtent.yMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
        
        # layerExtentList = [xmin,xmax,ymin,ymax]
        layerExtent = "{0},{1},{2},{3}".format(xmin,xmax,ymin,ymax)
        
        feedback.pushInfo(self.tr('     • Étendue de la couche : {0}'.format(layerExtent)))
        feedback.pushInfo(self.tr("     • Zone EPSG : {0}".format(crsCode)))
        feedback.pushInfo('')

        
        # Creation de la grille
        feedback.pushDebugInfo(self.tr("Création de la grille..."))
        grille = processing.run("qgis:creategrid", 
                        {'TYPE':2,
                         'EXTENT':layerExtent,
                         'HSPACING':CELL_SIZE,
                         'VSPACING':CELL_SIZE,
                         'HOVERLAY':0,
                         'VOVERLAY':0,
                         'CRS':'EPSG:'+crsCode,
                         'OUTPUT':'memory:'},
                         feedback=None)


        # Selection des carreaux utiles
        feedback.pushDebugInfo(self.tr("Nettoyage de la grille..."))
        processing.run("native:selectbylocation", 
                        {'INPUT':grille['OUTPUT'],
                         'PREDICATE':[0],
                         'INTERSECT':temp1['OUTPUT'],
                         'METHOD':0},
                         feedback=None)

        # On ne garde que les carreaux selectionnes
        result1 = processing.run("native:saveselectedfeatures", 
            {'INPUT':grille['OUTPUT'],
            'OUTPUT':'memory:'})
        
            
        refactorfieldsExpression = "'CRS" + crsCode + "RES"+ str(CELL_SIZE) + "mN'" + ' + to_string("bottom") + ' + "'E'" + ' + to_string("left")' 
        refactorfieldsExpression_1k = "'CRS" + crsCode + "RES"+ str('1000') + "mN'" + ' + to_string(1000*to_int(floor("bottom"/1000))) + ' + "'E'" + ' + to_string(1000*to_int(floor("left"/1000)))' 
        
        # Ajout des colonnes ID, x et y
        feedback.pushDebugInfo(self.tr("Ajout des identifiants Inspire..."))
        result2 = processing.run("qgis:refactorfields", 
                        {'INPUT':result1['OUTPUT'],
                             'FIELDS_MAPPING':[
                                {'expression': refactorfieldsExpression, 
                                 'length': 30, 
                                 'name': 'idINSPIRE', 
                                 'precision': 0, 
                                 'type': 10},
                                {'expression': refactorfieldsExpression_1k, 
                                 'length': 31, 
                                 'name': 'id_carr_1km', 
                                 'precision': 0, 
                                 'type': 10}],
                                 'OUTPUT':'memory:'},
                                 feedback=feedback)
                                 
        feedback.pushDebugInfo(self.tr("Chargement de la grille..."))
        feedback.pushInfo('')
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())  

        features = result2['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
            
        return {self.OUTPUT: 'dest_id'}
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'inspiregrid'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Générer une grille Inspire à partir d'un contour")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Carroyage et lissage')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateInspireGridAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid0.png')
    
    
class DissolveAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    CELL_SIZE = 'CELL_SIZE'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.CELL_SIZE,
                self.tr('Maille du carreau de la grille lissée (en mètres)'),
                defaultValue=1000,
                minValue=1,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr("Contour du territoire lissé"),
                [QgsProcessing.TypeVectorPolygon],
                optional = True
            )
        ) 
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("Carreaux regroupés"), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = iface.activeLayer()
        type = source.renderer().type()
        if type != 'graduatedSymbol':
            try:
                raise NameError("InputError")
            except:
                feedback.pushInfo(" ")
                feedback.reportError("     • Pas de discrétisation trouvée !…")
                feedback.pushInfo(" ")
                raise
        else:        
            crs = source.crs().authid()
            contour = self.parameterAsSource(parameters, self.INPUT, context)
            # feedback.pushInfo("contour : {0}".format(contour.sourceName()))
            
            CELL_SIZE = self.parameterAsInt( parameters, self.CELL_SIZE, context )
            # Layer extent
            layerExtent = source.extent()
            xmin = (math.floor(layerExtent.xMinimum()/CELL_SIZE)*CELL_SIZE)
            ymin = (math.floor(layerExtent.yMinimum()/CELL_SIZE)*CELL_SIZE)
            xmax = (math.floor(layerExtent.xMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
            ymax = (math.floor(layerExtent.yMaximum()/CELL_SIZE)*CELL_SIZE+CELL_SIZE)
            
            # layerExtentList = [xmin,xmax,ymin,ymax]
            layerExtent = "{0},{1},{2},{3} [{4}]".format(xmin,xmax,ymin,ymax,crs)
            feedback.pushInfo('____________________')
            feedback.pushInfo('')
            feedback.pushInfo(self.tr("Regroupement des carreaux après lissage BTB"))
            feedback.pushInfo('')    
            feedback.pushInfo(self.tr('     • Grille lissée : {0}'.format(source.sourceName())))
            feedback.pushInfo(self.tr('     • Maille : {0} m'.format(CELL_SIZE)))
            feedback.pushInfo(self.tr('     • Étendue de la couche : {0}'.format(layerExtent)))
            feedback.pushInfo(self.tr('     • SCR : {0}'.format(crs)))
            
            # 
            variable = source.renderer().classAttribute()
            feedback.pushInfo(self.tr('     • variable : {0}'.format(variable)))


        
            feedback.pushInfo(self.tr('     • type : {0}'.format(type)))
            
            formula = 'CASE '
            i = 1
            self.classes = []
            for item in source.renderer().ranges():
                formula += 'WHEN {0} >= {1} and {0} <= {2} then {3} \n'.format(variable,item.lowerValue(),item.upperValue(),i)
                # bornes = (item.upperValue(), item.lowerValue(), item.label())
                self.classes.append((item.label(),item.symbol().color().name()))
                i += 1
            formula += 'END'
            # feedback.pushInfo(self.tr('     • classes : \n{0}'.format(self.classes)))
            # feedback.pushInfo(self.tr('     • formula : \n{0}'.format(formula)))
            result = processing.run("qgis:refactorfields", 
                    {'INPUT': source,
                     'FIELDS_MAPPING':[
                        {'expression': '{0}'.format(formula), 
                         'length': 1, 
                         'name': 'CLASSE', 
                         'precision': 0, 
                         'type': 2
                        }],
                     'OUTPUT':'memory:'},
                         feedback = None)
                         
            dirpath = tempfile.mkdtemp()
            self.dirpath = dirpath
            sortie = str(re.sub('\\\\','/',dirpath) + "/raster.tif")
            
            raster = processing.run("gdal:rasterize", 
                    {'INPUT':result['OUTPUT'],
                     'FIELD':'CLASSE',
                     'BURN':0,
                     'UNITS':1,
                     'WIDTH':CELL_SIZE,
                     'HEIGHT':CELL_SIZE,
                     'EXTENT':layerExtent,
                     'NODATA':0,
                     'OPTIONS':'',
                     'DATA_TYPE':5,
                     'INIT':None,
                     'INVERT':False,
                     'OUTPUT':sortie},
                         feedback = None)
            vectorLayer = str(re.sub('\\\\','/',dirpath) + "/vecteur.gpkg")
            
            smoothedLayer = processing.run("grass7:r.to.vect", 
                    {'input':raster['OUTPUT'],
                     'type':2,
                     'column':'value',
                     '-s':True,
                     '-v':False,
                     '-z':False,
                     '-b':False,
                     '-t':False,
                     'output':vectorLayer,
                     'GRASS_REGION_PARAMETER':None,
                     'GRASS_REGION_CELLSIZE_PARAMETER':CELL_SIZE,
                     'GRASS_OUTPUT_TYPE_PARAMETER':0,
                     'GRASS_VECTOR_DSCO':'',
                     'GRASS_VECTOR_LCO':'',
                     'GRASS_VECTOR_EXPORT_NOCAT':False},
                         feedback = None)
                         
            fixedGeometries = processing.run("native:fixgeometries", 
                    {'INPUT':vectorLayer,
                     'OUTPUT':'memory:'},
                         feedback = None)
                         
            if contour is None:
                result = fixedGeometries        
            else:
                dissolvedContour = processing.run("native:dissolve", 
                        {'INPUT':contour.materialize(QgsFeatureRequest()),
                         'FIELD':[],
                         'OUTPUT':'memory:'},
                         feedback = None)
                
                result = processing.run("native:intersection", 
                        {'INPUT':fixedGeometries['OUTPUT'],
                         'OVERLAY':dissolvedContour['OUTPUT'],
                         'INPUT_FIELDS':[],
                         'OVERLAY_FIELDS':[],
                         'OUTPUT':'memory:'},
                         feedback = None)
                
            (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                                   result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].crs())  

            features = result['OUTPUT'].getFeatures()
            for feature in features:
                sink.addFeature(feature, QgsFeatureSink.FastInsert)
                             
            self.dest_id = dest_id
            # shutil.rmtree(dirpath)
            return {self.OUTPUT: 'dest_id'}
        
    def postProcessAlgorithm(self, context, feedback):
        # Styling the output
        output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        categories = []
        i = 1
        
        for classe in self.classes:
            feedback.pushInfo("     • classe {0}: {1}".format(i,classe))
            symbol = QgsSymbol.defaultSymbol(output0.geometryType())
            layer_style = {}
            layer_style['color'] = classe[1]
            layer_style['outline_style'] = 'no'
            symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
            if symbol_layer is not None:
                symbol.changeSymbolLayer(0, symbol_layer)
            category = QgsRendererCategory(i,symbol,classe[0])
            categories.append(category)
            i += 1
        
        renderer = QgsCategorizedSymbolRenderer('value', categories)
        if renderer is not None:
            output0.setRenderer(renderer)
        output0.triggerRepaint()
        shutil.rmtree(self.dirpath)
        return {self.OUTPUT: self.OUTPUT}
        
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'dissolve'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Regrouper les carreaux de même classe après lissage")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Carroyage et lissage')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smoothing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DissolveAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/grid2.png')