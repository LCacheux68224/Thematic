# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from .SmoothingAlgorithms import CreateGridAlgorithm
from .SmoothingAlgorithms import CreateInspireGridAlgorithm
from .SmoothingAlgorithms import SmoothToGridAlgorithm

from .CirclesAlgorithms import CreateAutomaticSymbolsAlgorithm
from .CirclesAlgorithms import CreateCustomSymbolsAlgorithm
from .CirclesAlgorithms import CreateCirclesLegendAlgorithm
from .CirclesAlgorithms import FormatProportionalSymbolsLegendAlgorithm

from .FlowsAlgorithms import CreateLinesAlgorithm
from .FlowsAlgorithms import ShortenLinesAlgorithm
from .FlowsAlgorithms import CreateArrowsAlgorithm
from .FlowsAlgorithms import CreateCustomArrowsAlgorithm
from .FlowsAlgorithms import CreateSaphirArrowsAlgorithm
from .FlowsAlgorithms import CreateCustomSaphirArrowsAlgorithm

import os
from qgis.PyQt.QtGui import QIcon

class ThematicProvider(QgsProcessingProvider):

    def __init__(self):
        QgsProcessingProvider.__init__(self)

        # Load algorithms
        self.alglist = [CreateGridAlgorithm(),
                        SmoothToGridAlgorithm(),
                        CreateInspireGridAlgorithm(),
                        CreateAutomaticSymbolsAlgorithm(),
                        CreateCustomSymbolsAlgorithm(),
                        CreateCirclesLegendAlgorithm(),
                        FormatProportionalSymbolsLegendAlgorithm(),
                        CreateLinesAlgorithm(),
                        ShortenLinesAlgorithm(),
                        CreateArrowsAlgorithm(),
                        CreateCustomArrowsAlgorithm(),
                        CreateSaphirArrowsAlgorithm(),
                        CreateCustomSaphirArrowsAlgorithm()]

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        for alg in self.alglist:
            self.addAlgorithm( alg )

    def id(self):
        """
        Returns the unique provider id, used for identifying the provider. This
        string should be a unique, short, character only string, eg "qgis" or
        "gdal". This string should not be localised.
        """
        return 'thematic'

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.

        This string should be short (e.g. "Lastools") and localised.
        """
        return self.tr('Thematic - Boîte à outils cartographique')

    def longName(self):
        """
        Returns the a longer version of the provider name, which can include
        extra details such as version numbers. E.g. "Lastools LIDAR tools
        (version 2.2.1)". This string should be localised. The default
        implementation returns the same string as name().
        """
        return self.name()
        
    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/icone.png')