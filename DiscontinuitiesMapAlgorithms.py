# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication

from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingParameterBoolean,
                       QgsProject,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorLayer,
                       QgsCoordinateReferenceSystem,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink,
                       QgsFeatureRequest,
                       QgsField,
                       QgsVectorLayer,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterField,
                       QgsProcessingParameterString,
                       QgsVectorFileWriter,
                       QgsProcessingParameterFile,
                       QgsWkbTypes,
                       QgsProcessingParameterDefinition,
                       QgsFeature,
                       QgsProcessingUtils,
                       QgsSymbol,
                       QgsCategorizedSymbolRenderer,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory)
import processing
import tempfile
import shutil
import re
import os.path
import os
from sys import platform
import subprocess
import locale
from qgis.utils import iface
import configparser

# ---------------------------------- #
# Initialisation de la palette Insee #
# ---------------------------------- #



class GetInnerBordersAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    CODGEO = 'CODGEO'
    DEL_HOLES = 'DEL_HOLES'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Input vector

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon],
                optional=False
            )
        )

        self.addParameter(QgsProcessingParameterField(
                self.CODGEO,
                self.tr('Geographical ID'),
                None,
                self.INPUT,
                QgsProcessingParameterField.String,
                False
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(self.DEL_HOLES,
                self.tr('Delete holes'),
                defaultValue=False))


        # Output vector

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Internal boundaries'),
                type=QgsProcessing.TypeVectorPolygon
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # codecNomsFichiers = locale.getpreferredencoding()
                
        feedback.pushInfo(" ")
        feedback.pushInfo("Extract borders between polygons")

        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        codgeo1 = self.parameterAsString(parameters, self.CODGEO, context)
        codgeo2 = codgeo1 +'_2'
        deleteHoles = self.parameterAsBool(parameters,self.DEL_HOLES,context)

        rigthHandPolygon = processing.run("native:forcerhr", {
            'INPUT': source,
            'OUTPUT': 'memory:'})

        if deleteHoles:
            rigthHandPolygon = processing.run("native:deleteholes", {
                'INPUT': rigthHandPolygon['OUTPUT'],
                'MIN_AREA':0,
                'OUTPUT': 'memory:'})

        lineLayer = processing.run("native:polygonstolines", {
            'INPUT': rigthHandPolygon['OUTPUT'],
            'OUTPUT': 'memory:'})

        intersectionLayer = processing.run("native:intersection", {
            'INPUT': lineLayer['OUTPUT'],
            'OVERLAY': lineLayer['OUTPUT'],
            'INPUT_FIELDS': [], 'OVERLAY_FIELDS': [], 'OVERLAY_FIELDS_PREFIX': '', 'OUTPUT': 'memory:'})

        merdgedLayer = processing.run("native:mergelines", {
            'INPUT': intersectionLayer['OUTPUT'],
            'OUTPUT': 'memory:'})


        filterExpression = ' \"{0}\" >  \"{1}\" '.format(codgeo1,codgeo2)
        # feedback.pushInfo(self.tr("filterExpression : ") + filterExpression)

        result = processing.run("native:extractbyexpression", {
            'INPUT': merdgedLayer['OUTPUT'],
            'EXPRESSION': filterExpression, 'OUTPUT': 'memory:'})

        
        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.LineString, result['OUTPUT'].crs())
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        return {self.OUTPUT: 'dest_id'}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'getinnerborders'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Extract borders between polygons')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Borders and discontinuities')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'discontinuities'

    def tr(self, string):
        return QCoreApplication.translate('GetInnerBordersAlgorithm', string)

    def createInstance(self):
        return GetInnerBordersAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/innerBorders.png')


class RelativeDiscontinuitiesAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    CODGEO = 'CODGEO'
    VARIABLE = 'VARIABLE'
    OUTPUT = 'OUTPUT'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Input vector

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon],
                optional=False
            )
        )

        self.addParameter(QgsProcessingParameterField(
            self.CODGEO,
            self.tr('Geographical ID'),
            None,
            self.INPUT,
            QgsProcessingParameterField.String,
            False
        )

        )
        self.addParameter(QgsProcessingParameterField(
                self.VARIABLE,
                self.tr('Value to represent'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                False
            )
        )

        # Output vector

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Internal boundaries'),
                type=QgsProcessing.TypeVectorPolygon
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # codecNomsFichiers = locale.getpreferredencoding()

        feedback.pushInfo(" ")
        feedback.pushInfo(self.tr("Extract borders between polygons"))

        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        codgeo1 = self.parameterAsString(parameters, self.CODGEO, context)
        codgeo2 = codgeo1 + '_2'
        value1 = self.parameterAsString(parameters, self.VARIABLE , context)
        value2 = value1 + '_2'

        feedback.pushInfo(" ")
        # feedback.pushInfo(self.tr("Layer : ")+ source)
        feedback.pushInfo(self.tr("Geographical ID : ") + codgeo1)
        feedback.pushInfo(self.tr("Variable : ") + value1)
        feedback.pushInfo(self.tr("Var2 : ") + value2)

        rigthHandPolygon = processing.run("native:forcerhr", {
            'INPUT': source,
            'OUTPUT': 'memory:'})

        rigthHandPolygon = processing.run("native:deleteholes", {
            'INPUT': rigthHandPolygon['OUTPUT'],
            'MIN_AREA':0,
            'OUTPUT': 'memory:'})

        lineLayer = processing.run("native:polygonstolines", {
            'INPUT': rigthHandPolygon['OUTPUT'],
            'OUTPUT': 'memory:'})

        intersectionLayer = processing.run("native:intersection", {
            'INPUT': lineLayer['OUTPUT'],
            'OVERLAY': lineLayer['OUTPUT'],
            'INPUT_FIELDS': [], 'OVERLAY_FIELDS': [], 'OVERLAY_FIELDS_PREFIX': '', 'OUTPUT': 'memory:'})

        merdgedLayer = processing.run("native:mergelines", {
            'INPUT': intersectionLayer['OUTPUT'],
            'OUTPUT': 'memory:'})

        #         'max( \"taux\" , \"taux_2\" )/min( \"taux\" , \"taux_2\" )

        filterExpression = ' \"{0}\" !=  \"{1}\" and  \"{2}\" > \"{3}\" '.format(codgeo1,codgeo2, value1, value2)
        # feedback.pushInfo(self.tr("filterExpression : ") + filterExpression)

        filteredLayer = processing.run("native:extractbyexpression", {
            'INPUT': merdgedLayer['OUTPUT'],
            'EXPRESSION': filterExpression, 'OUTPUT': 'memory:'})

        formula = 'max( \"{0}\" , \"{1}\" )/min( \"{0}\" , \"{1}\" )'.format(value1,value2)

        result = processing.run("qgis:fieldcalculator", {
            'INPUT': filteredLayer['OUTPUT'],
            'FIELD_NAME': 'discont',
            'FIELD_TYPE': 0,
            'FIELD_LENGTH': 10,
            'FIELD_PRECISION': 2,
            'NEW_FIELD': True,
            'FORMULA': formula, 'OUTPUT': 'memory:'})





        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.LineString,
                                               result['OUTPUT'].crs())
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        self.dest_id = dest_id
        return {self.OUTPUT: 'dest_id'}

    def postProcessAlgorithm(self, context, feedback):
        # Styling dicontinuities
        output = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        path = os.path.dirname(__file__) + '/styles/discontinuite.qml'
        output.loadNamedStyle(path)

        output.triggerRepaint()
        return {self.OUTPUT: self.dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'relativediscontinuities'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('relative discontinuities')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Borders and discontinuities')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'discontinuities'

    def tr(self, string):
        return QCoreApplication.translate('RelativeDiscontinuitiesAlgorithm', string)

    def createInstance(self):
        return RelativeDiscontinuitiesAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/discontinuities.png')