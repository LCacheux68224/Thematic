# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication
import os
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsMessageLog,
                       QgsLogger,
                       QgsFeatureRequest,
                       QgsWkbTypes,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterField,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterBoolean,
                       QgsVectorLayer,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProject,
                       QgsVectorFileWriter,
                       QgsExpressionContextUtils,
                       QgsProcessingUtils,
                       QgsFillSymbol,
                       QgsSymbol,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory,
                       QgsCategorizedSymbolRenderer,
                       QgsProject)
from qgis.utils import iface
import processing , math
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
# import tempfile
# import re

# defaultMaxValue = 0
# defaultMaxRadius = 0
# ---------------------------- #
# Create proportional circles  #
# ---------------------------- #

class CreateAutomaticSymbolsAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    ANALYSIS_LAYER = 'ANALYSIS_LAYER'
    COLUMN = 'COLUMN'
    SHAPE = 'SHAPE'
    METHOD = 'METHOD'
    LEGEND = 'LEGEND'
    OUTPUT2 = 'OUTPUT2'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
            
        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon,QgsProcessing.TypeVectorPoint],
                optional=False
            )
        )
                        
        self.addParameter(QgsProcessingParameterField(
                self.COLUMN,
                self.tr('Value to represent'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                False
            )
        )
        
        self.shapes = [self.tr('Circles'), self.tr('Diamons'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Type of representation'),
                options=self.shapes
            )
        )         

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ANALYSIS_LAYER,
                self.tr('Polygon layer used for an automatic scale'),
                [QgsProcessing.TypeVectorPolygon],
                optional=False
            )
        )        
        
        self.addParameter(
            QgsProcessingParameterBoolean(self.LEGEND,
                self.tr('Add an automatic legend layer'),
                defaultValue=True))
                
            
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        """
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr("Output layer")
            )
        )
        
                                                            
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT2,
                self.tr("Legend layer")
            )
        )
        """
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Output layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        ) 
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT2, 
                self.tr('Legend layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )         
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        stockValue = self.parameterAsString(parameters, self.COLUMN , context) 
        self.stockValue = stockValue
        analysisLayer = self.parameterAsSource(parameters, self.ANALYSIS_LAYER, context)        
        # OUTPUT = self.parameterAsOutputLayer(parameters,self.OUTPUT,context) 
   
        # OUTPUT2 = self.parameterAsOutputLayer(parameters,self.OUTPUT2,context) 
        automaticLegend = self.parameterAsBool(parameters,self.LEGEND,context)
   
        """
        sqlQuerry = 'select * from input1 order by {0} DESC'.format(stockValue)
        source = processing.run("qgis:executesql",
                {'INPUT_DATASOURCES':[source0.sourceName()],
                 'INPUT_QUERY':sqlQuerry,
                 'INPUT_UID_FIELD':'',
                 'INPUT_GEOMETRY_FIELD':'',
                 'INPUT_GEOMETRY_TYPE':0,
                 'INPUT_GEOMETRY_CRS':None,
                 'OUTPUT':'memory:'},
                 feedback=feedback)
        # QgsMessageLog.logMessage("extended : {0}".format(dir(source)), 'Thematic Plugin', 0)                  
        """
        '''
        if source.geometryType() == QgsWkbTypes.PolygonGeometry :
            # feedback.pushInfo(self.tr('Transformation en points'))
            source2 = processing.run("native:pointonsurface", 
                                    {'INPUT':source ,
                                     'ALL_PARTS':False,
                                     'OUTPUT':'memory:'},
                                     feedback=feedback)
            source = source2['OUTPUT']
        '''
        # area of the analysis layer for automatic scale
        features = analysisLayer.materialize(QgsFeatureRequest()).getFeatures()
        layerArea = sum([element.geometry().area() for element in features])
            
        selection = processing.run("native:selectbylocation", 
                    {'INPUT': source ,
                     'PREDICATE':[0],
                     'INTERSECT':analysisLayer.materialize(QgsFeatureRequest()),
                     'METHOD':0},
                      feedback = feedback)
                     
        selectedPoints = processing.run("native:saveselectedfeatures", 
                    {'INPUT':source,
                     'OUTPUT':'memory:'})
                     
        features = selectedPoints['OUTPUT'].getFeatures()
        attributeList = sorted([abs(element[stockValue]) for element in features if element[stockValue] != None], reverse=True)
        # feedback.pushInfo(self.tr('     AttributeList'.format(len(attributeList))))
        val1 = attributeList[0]
        if attributeList[1] <= val1 / 3 :
            val2 = attributeList[1]
        else : 
            val2 = val1/3
        if attributeList[2] <= val2 /3:
            val3= attributeList[2]
        else :
            val3 = val2/3

        summary = processing.run("qgis:basicstatisticsforfields", 
                        {'INPUT_LAYER':selectedPoints['OUTPUT'],
                            'FIELD_NAME':stockValue
                        },
                        feedback = feedback)
        somme = summary['SUM']
        
        maxRadius0 = 2*math.sqrt(abs(val1)*layerArea/(7*math.pi*somme))
        radiusFormula = '2*sqrt(abs("{0}")*{1}/(7*pi()*{2}))'.format(stockValue, layerArea, summary['SUM'])
        
        # Check if variable names VAL, R and VARIABLE exist in attribute list - if TRUE then increment
        fieldList = [field.name() for field in source.fields()]    
        
        valueName, radiusName, varName = 'VAL', 'R', 'VAR'
        i , iLabel = 0, ''
        while (valueName+iLabel) in fieldList \
                or (radiusName+iLabel) in fieldList \
                or (varName+iLabel) in fieldList:
            i += 1
            iLabel = '_'+str(i)

        valueName       += iLabel
        radiusName      += iLabel
        varName         += iLabel
        
        # Ajout de la colonne R
        radiusAttribute = processing.run("qgis:fieldcalculator", 
                        {'INPUT':source,
                         'FIELD_NAME':radiusName,
                         'FIELD_TYPE':0,
                         'FIELD_LENGTH':10,
                         'FIELD_PRECISION':3,
                         'NEW_FIELD':True,
                         'FORMULA':radiusFormula,
                         'OUTPUT':'memory:'},
                          feedback=feedback)
        varTexte = u'if( \"{0}\" >= 0,\'1 - {0} > 0\',\'2 - {0} < 0\')'.format(stockValue)
        variableNameAttribute = processing.run("qgis:fieldcalculator", 
                        {'INPUT':radiusAttribute['OUTPUT'],
                         'FIELD_NAME':varName,
                         'FIELD_TYPE':2,
                         'FIELD_LENGTH':len(varTexte),
                         'FIELD_PRECISION':3,
                         'NEW_FIELD':True,
                         'FORMULA':varTexte,
                         'OUTPUT':'memory:'},
                          feedback=feedback)
        # crs = source2.crs().authid()

        # Type of symbols
        representation = self.parameterAsInt( parameters, self.SHAPE, context )

        if self.parameterAsInt( parameters, self.SHAPE, context ) == 0:
            # circles
            representation0 = 2
        elif self.parameterAsInt( parameters, self.SHAPE, context ) == 1:
            representation0 = 1
        else:
            # squares
            representation0 = 0
            
        centroid = processing.run("native:centroids", 
                        {'INPUT':variableNameAttribute['OUTPUT'],
                         'ALL_PARTS':False,
                         'OUTPUT':'memory:'},
                          feedback = feedback)   
        sortedLayer = processing.run("native:orderbyexpression", 
                        {'INPUT': centroid['OUTPUT'],
                         'EXPRESSION':'\"R\"',
                         'ASCENDING':False,
                         'NULLS_FIRST':False,
                         'OUTPUT':'memory:'})                             
                # QgsMessageLog.logMessage("extended : {0}".format(dir(source)), 'Thematic Plugin', 0)
                
        result = processing.run("qgis:rectanglesovalsdiamondsvariable",
                        {'INPUT': sortedLayer['OUTPUT'],
                         'SHAPE':representation0,
                         'WIDTH':radiusName,
                         'HEIGHT':radiusName,
                         'ROTATION':None,
                         'SEGMENTS':36,
                         'OUTPUT':'memory:'},
                          feedback = feedback)
                          
        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].crs())        
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)   
            

        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo(self.tr("    Analyse en symboles proportionnels"))
        feedback.pushInfo('') 
        feedback.pushInfo(self.tr("     • Variable analysée : {0}".format(stockValue)))
        feedback.pushInfo('')
        feedback.pushInfo(self.tr('   Échelle automatique :'))   
        feedback.pushInfo("      • Val :  {0}".format(val1))
        feedback.pushInfo("      • R :    {0}".format(maxRadius0))  
        
        self.dest_id = dest_id
        self.varName = varName

        if automaticLegend:       
            # OUTPUT2 = self.parameterAsOutputLayer(parameters,self.OUTPUT2,context) 
            xLegend = source.sourceExtent().xMaximum()+maxRadius0
            yLegend = (source.sourceExtent().yMinimum()+source.sourceExtent().yMaximum())/2
            legendCoords = str(xLegend)+','+str(yLegend)
            result2 = processing.run("thematic:createcircleslegend", 
                        {'SHAPE':representation,
                        'MAX_VALUE':val1,
                        'MAX_RADIUS':maxRadius0,
                        'VALUES_LIST':'',
                        'XY_LEGEND':legendCoords,
                        'OUTPUT':'memory:'},
                        feedback = None)    
            feedback.pushInfo(self.tr('    Valeurs représentées dans la légende :'))
            feedback.pushInfo("     • val1 : {0}".format(val1))
            feedback.pushInfo("     • val2 : {0}".format(val2))
            feedback.pushInfo("     • val3 : {0}".format(val3)) 
            feedback.pushInfo(self.tr('    Coordonnées de la légende :'))             
            feedback.pushInfo("      • X :    {0}".format(xLegend))
            feedback.pushInfo("      • Y :    {0}".format(yLegend))              
            feedback.pushInfo('____________________')
            feedback.pushInfo('')             
            (sink2, dest_id2) = self.parameterAsSink(parameters, self.OUTPUT2, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())        
            features = result2['OUTPUT'].getFeatures()
            for feature in features:
                sink2.addFeature(feature, QgsFeatureSink.FastInsert)     
            # to get hold of the layer in post processing for styling the legend
            self.dest_id2=dest_id2
            self.representation = representation
            return {self.OUTPUT: 'dest_id', self.OUTPUT2: 'dest_id2'}            
        else:
            feedback.pushInfo(self.tr('   Légende non demandée'))   
            feedback.pushInfo('____________________')
            feedback.pushInfo('')     
            project = QgsProject.instance()
            QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesMaxValue',val1)
            QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesMaxRadius',maxRadius0)
            QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesRepresentation',self.parameterAsInt( parameters, self.SHAPE, context ))
            self.dest_id2 =  None
            return {self.OUTPUT: 'dest_id'}
        

    def postProcessAlgorithm(self, context, feedback):
        # Styling the analysis
        output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        categories = []
        
        symbol = QgsSymbol.defaultSymbol(output0.geometryType())  
        layer_style = {}
        layer_style['color'] = '#fdbf6f'
        layer_style['outline'] = '#000000'
        layer_style['outline_width'] = '0.1'
        symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        if symbol_layer is not None:
            symbol.changeSymbolLayer(0, symbol_layer)
        category = QgsRendererCategory('1 - '+self.stockValue + ' > 0', symbol, str(self.stockValue + ' >= 0'))        
        categories.append(category)
    
        symbol = QgsSymbol.defaultSymbol(output0.geometryType())  
        layer_style = {}
        layer_style['color'] = '#a6cee3'
        layer_style['outline'] = '#000000'
        layer_style['outline_width'] = '0.1'
        symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        if symbol_layer is not None:
            symbol.changeSymbolLayer(0, symbol_layer)
        category = QgsRendererCategory('2 - '+self.stockValue + ' < 0', symbol, str(self.stockValue + ' < 0'))        
        categories.append(category)
        
        renderer = QgsCategorizedSymbolRenderer(self.varName, categories)
        if renderer is not None:
            output0.setRenderer(renderer)
        output0.triggerRepaint()
        
        # Styling de legend
        if self.dest_id2 is not None:
            # Styling the legend
            output = QgsProcessingUtils.mapLayerFromString(self.dest_id2, context)
            if self.representation == 0:
                # circles
                path = os.path.dirname(__file__) + '/styles/circles_legend.qml'
            elif self.representation == 1:
                # diamons
                path = os.path.dirname(__file__) + '/styles/diamons_legend.qml'
            else:
                # squares
                path = os.path.dirname(__file__) + '/styles/squares_legend.qml'
            output.loadNamedStyle(path)
            output.triggerRepaint()
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: self.dest_id2}
        else:
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: None}


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'automaticproportionalsymbols'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Analyse avec échelle automatique')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Symboles proportionnels')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateAutomaticSymbolsAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRonds.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Description html")    

# ---------------------------- #
# Create custom symbols layer  #
# ---------------------------- #

class CreateCustomSymbolsAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    COLUMN = 'COLUMN'
    MAX_RADIUS = 'MAX_RADIUS'
    MAX_VALUE = 'MAX_VALUE'
    SHAPE = 'SHAPE'
    METHOD = 'METHOD'
    LEGEND = 'LEGEND'
    OUTPUT2 = 'OUTPUT2'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        project = QgsProject.instance()

        try:
            maxValue = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesMaxValue')
            maxRadius = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesMaxRadius')
            representation = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesRepresentation')
        except:
            maxValue = 0
            maxRadius = 0
            representation = 0
            
        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon,QgsProcessing.TypeVectorPoint],
                optional=False
            )
        )

                        
        self.addParameter(QgsProcessingParameterField(
                self.COLUMN,
                self.tr('Value to represent'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                False
            )
        )

        
        self.shapes = [self.tr('Circles'), self.tr('Diamons'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Type of representation'),
                options=self.shapes,
                defaultValue=representation
            )
        ) 
        

        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_VALUE,
                self.tr('Max value'),
                minValue=0,
                defaultValue = maxValue,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_RADIUS,
                self.tr('Max radius (in meters)'),
                minValue=0,
                defaultValue=maxRadius,
                optional=False
            )
        )

        
        self.addParameter(
            QgsProcessingParameterBoolean(self.LEGEND,
                self.tr('Add an automatic legend layer'),
                defaultValue=True))                
            
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        """
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr("Output layer")
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT2,
                self.tr("Legend layer")
            )
        )
        """        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Output layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )         
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT2, 
                self.tr('Legend layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        stockValue = self.parameterAsString(parameters, self.COLUMN , context) 
        self.stockValue = stockValue

        # OUTPUT = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        
        automaticLegend = self.parameterAsBool(parameters,self.LEGEND,context)        
        features = source.getFeatures()
        attributeList = sorted([abs(element[stockValue]) for element in features if element[stockValue] != None], reverse=True)
        val1 = attributeList[0]
        if attributeList[1] <= val1 / 3 :
            val2 = attributeList[1]
        else : 
            val2 = val1/3
        if attributeList[2] <= val2 /3:
            val3= attributeList[2]
        else :
            val3 = val2/3
        
        maxRadius = self.parameterAsInt(parameters,self.MAX_RADIUS,context)
        maxValue = self.parameterAsInt(parameters,self.MAX_VALUE,context)        

        radiusFormula = '{0} * sqrt(abs("{1}")/{2})'.format(maxRadius,stockValue,maxValue)
          
        fieldList = [field.name() for field in source.fields()]    
        
        valueName, radiusName, varName = 'VAL', 'R', 'VAR'
        i , iLabel = 0, ''
        while (valueName+iLabel) in fieldList \
                or (radiusName+iLabel) in fieldList \
                or (varName+iLabel) in fieldList:
            i += 1
            iLabel = '_'+str(i)
            QgsMessageLog.logMessage("R : {0}".format(iLabel), 'Thematic Plugin', 0)

        valueName       += iLabel
        radiusName      += iLabel
        varName    += iLabel
        
        self.varName = varName
        
        # Ajout de la colonne R
        radiusAttribute = processing.run("qgis:fieldcalculator", 
                        {'INPUT':source,
                         'FIELD_NAME':radiusName,
                         'FIELD_TYPE':0,
                         'FIELD_LENGTH':10,
                         'FIELD_PRECISION':3,
                         'NEW_FIELD':True,
                         'FORMULA':radiusFormula,
                         'OUTPUT':'memory:'},
                          feedback=feedback)
        varTexte = u'if( \"{0}\" >= 0,\'1 - {0} > 0\',\'2 - {0} < 0\')'.format(stockValue)
        variableNameAttribute = processing.run("qgis:fieldcalculator", 
                        {'INPUT':radiusAttribute['OUTPUT'],
                         'FIELD_NAME':varName,
                         'FIELD_TYPE':2,
                         'FIELD_LENGTH':len(varTexte),
                         'FIELD_PRECISION':3,
                         'NEW_FIELD':True,
                         'FORMULA':varTexte,
                         'OUTPUT':'memory:'},
                          feedback=feedback)
        # Type of symbols
        representation0 = self.parameterAsInt( parameters, self.SHAPE, context )
        self.representation = representation0
        # QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesRepresentation',representation0)
        if self.parameterAsInt( parameters, self.SHAPE, context ) == 0:
            # circles
            representation = 2
        elif self.parameterAsInt( parameters, self.SHAPE, context ) == 1:
            representation = 1
        else:
            # squares
            representation = 0

        centroid = processing.run("native:centroids", 
                        {'INPUT':variableNameAttribute['OUTPUT'],
                         'ALL_PARTS':False,
                         'OUTPUT':'memory:'},
                          feedback = feedback)   
        sortedLayer = processing.run("native:orderbyexpression", 
                        {'INPUT': centroid['OUTPUT'],
                         'EXPRESSION':'\"R\"',
                         'ASCENDING':False,
                         'NULLS_FIRST':False,
                         'OUTPUT':'memory:'}) 

        result = processing.run("qgis:rectanglesovalsdiamondsvariable",
                        {'INPUT': sortedLayer['OUTPUT'],
                         'SHAPE':representation,
                         'WIDTH':'R',
                         'HEIGHT':'R',
                         'ROTATION':None,
                         'SEGMENTS':36,
                         'OUTPUT':'memory:'},
                          feedback = feedback)
                          
        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].crs())    
                                               
        self.dest_id  = dest_id
                                               
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)   
            
        feedback.pushInfo('____________________')
        feedback.pushInfo('')       
        feedback.pushInfo(self.tr("    Analyse en symboles proportionnels"))
        feedback.pushInfo('')           
        feedback.pushInfo(self.tr("    Variable analysée : {0}".format(stockValue)))
        feedback.pushInfo('')
        feedback.pushInfo(self.tr('    Échelle personnalisée :'))  
        feedback.pushInfo("      • Val :  {0}".format(maxValue))
        feedback.pushInfo("      • R :    {0}".format(maxRadius))
        
        if automaticLegend:       
            # OUTPUT2 = self.parameterAsOutputLayer(parameters,self.OUTPUT2,context)
            xLegend = source.sourceExtent().xMaximum()+maxRadius
            yLegend = (source.sourceExtent().yMinimum()+source.sourceExtent().yMaximum())/2
            legendCoords = str(xLegend)+','+str(yLegend)           
            result2 = processing.run("thematic:createcircleslegend", 
                        {'SHAPE':representation0,
                         'MAX_VALUE':maxValue,
                         'MAX_RADIUS':maxRadius,
                         'VALUES_LIST':'',
                         'XY_LEGEND':legendCoords,
                         'OUTPUT':'memory:'},
                         feedback = None)
                         
            feedback.pushInfo(self.tr('    Valeurs automatiques représentées dans la légende :'))
            feedback.pushInfo("      • val1 : {0}".format(val1))
            feedback.pushInfo("      • val2 : {0}".format(val2))
            feedback.pushInfo("      • val3 : {0}".format(val3))        
            feedback.pushInfo(self.tr('    Coordonnées de la légende :'))             
            feedback.pushInfo("      • X :    {0}".format(xLegend))
            feedback.pushInfo("      • Y :    {0}".format(yLegend))  
            feedback.pushInfo('____________________')            
            feedback.pushInfo('') 
            (sink2, dest_id2) = self.parameterAsSink(parameters, self.OUTPUT2, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())     
            self.dest_id2 = dest_id2
            
            features = result2['OUTPUT'].getFeatures()
            for feature in features:
                sink2.addFeature(feature, QgsFeatureSink.FastInsert)                                                 
            return {self.OUTPUT: 'dest_id', self.OUTPUT2: 'dest_id2'}
        else:
            feedback.pushInfo(self.tr('   Légende non demandée'))    
            feedback.pushInfo('____________________')            
            feedback.pushInfo('')   
            project = QgsProject.instance()            
            QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesMaxValue',maxValue)
            QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesMaxRadius',maxRadius)
            QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesRepresentation',self.parameterAsInt( parameters, self.SHAPE, context ))      
            
            return {self.OUTPUT: 'dest_id'}        


    def postProcessAlgorithm(self, context, feedback):
        # Styling the analysis
        output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        categories = []
        
        symbol = QgsSymbol.defaultSymbol(output0.geometryType())  
        layer_style = {}
        layer_style['color'] = '#fdbf6f'
        layer_style['outline'] = '#000000'
        layer_style['outline_width'] = '0.1'
        symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        if symbol_layer is not None:
            symbol.changeSymbolLayer(0, symbol_layer)
        category = QgsRendererCategory('1 - '+self.stockValue + ' > 0', symbol, str(self.stockValue + ' >= 0'))        
        categories.append(category)
    
        symbol = QgsSymbol.defaultSymbol(output0.geometryType())  
        layer_style = {}
        layer_style['color'] = '#a6cee3'
        layer_style['outline'] = '#000000'
        layer_style['outline_width'] = '0.1'
        symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        if symbol_layer is not None:
            symbol.changeSymbolLayer(0, symbol_layer)
        category = QgsRendererCategory('2 - '+self.stockValue + ' < 0', symbol, str(self.stockValue + ' < 0'))        
        categories.append(category)
        
        renderer = QgsCategorizedSymbolRenderer(self.varName, categories)
        if renderer is not None:
            output0.setRenderer(renderer)
        output0.triggerRepaint()
        
        # Styling de legend
        if self.dest_id2 is not None:
            # Styling the legend
            output = QgsProcessingUtils.mapLayerFromString(self.dest_id2, context)
            if self.representation == 0:
                # circles
                path = os.path.dirname(__file__) + '/styles/circles_legend.qml'
            elif self.representation == 1:
                # diamons
                path = os.path.dirname(__file__) + '/styles/diamons_legend.qml'
            else:
                # squares
                path = os.path.dirname(__file__) + '/styles/squares_legend.qml'
            output.loadNamedStyle(path)
            output.triggerRepaint()
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: self.dest_id2}
        else:
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: None}
            
            
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'customproportionalsymbols'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Analyse avec échelle personnalisée')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Symboles proportionnels')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateCustomSymbolsAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRonds.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Description html") 

# ---------------------------- #
# Create circles legend #
# ---------------------------- #

class CreateCirclesLegendAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    COLUMNS = 'COLUMNS'
    MAX_RADIUS = 'MAX_RADIUS'
    MAX_VALUE = 'MAX_VALUE'
    VALUES_LIST = 'VALUES_LIST'
    XY_LEGEND = 'XY_LEGEND'
    SHAPE = 'SHAPE'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        project = QgsProject.instance()

        try:
            maxValue = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesMaxValue')
            maxRadius = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesMaxRadius')
            representation = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesRepresentation')
        except:
            maxValue = 0
            maxRadius = 0
            representation = 0
            
        self.shapes = [self.tr('Circles'), self.tr('Diamons'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Type of representation'),
                defaultValue = representation,
                options=self.shapes
            )
        ) 

        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_VALUE,
                self.tr('Max value'),
                minValue=0,
                defaultValue = maxValue,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_RADIUS,
                self.tr('Max radius (in meters)'),
                minValue=0,
                defaultValue = maxRadius,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterString(
                self.VALUES_LIST,
                self.tr('List of values to represent'),
                optional=True
            )
        )
        

        params = []
        
        params.append(
            QgsProcessingParameterString(
                self.XY_LEGEND,
                self.tr('Position of the legend X,Y'),
                optional=True
            )
        )
        
        for param in params:
            param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagHidden)
            self.addParameter(param)

            
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        """
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr("Output layer")
            )
        )
        """
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Legend layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )        
        
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        project = QgsProject.instance()
        # OUTPUT = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)  
        
      
        # Type of symbols
        representation = self.parameterAsInt( parameters, self.SHAPE, context )
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesRepresentation',representation)
        self.representation = representation
        if representation == 0:
            # circles
            representation = 2
        elif representation == 1:
            representation = 1
        else:
            # squares
            representation = 0

        maxRadius = self.parameterAsInt(parameters,self.MAX_RADIUS,context)
        maxValue = self.parameterAsInt(parameters,self.MAX_VALUE,context)  
        valueList = self.parameterAsString(parameters, self.VALUES_LIST , context)
        legendCustomValues = valueList.strip().replace(';',' ').split()
        coordsLegendText = self.parameterAsString(parameters, self.XY_LEGEND , context)
        
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo(self.tr("     Échelle des symboles proportionnels :"))
        feedback.pushInfo('')    
        feedback.pushInfo(self.tr('     • Val : {0}'.format(maxValue)))   
        feedback.pushInfo(self.tr('     • R : {0}'.format(maxRadius)))              
        feedback.pushInfo('')    
        
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesMaxValue',maxValue)
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_circlesMaxRadius',maxRadius)
 
        
        if len(coordsLegendText) >0 :
            legendCoordsList = coordsLegendText.strip().split(',')
            coordsLegend =[float(item) for item in legendCoordsList ]
            xLegend = coordsLegend[0]
            yLegend = coordsLegend[1]            
        else:
            canevasExtent = iface.mapCanvas().extent()
            xLegend = (canevasExtent.xMaximum()+canevasExtent.xMinimum() )/2
            yLegend = (canevasExtent.yMaximum()+canevasExtent.yMinimum() )/2
  

        coeff = maxRadius * (math.pi/maxValue)**.5
        Value = maxValue
        # radius = coeff * (Value/math.pi) ** .5
        # dirpath = tempfile.mkdtemp()
        # sortie = str(re.sub('\\\\','/',dirpath) + "/output.shp")
        # feedback.pushInfo(self.tr('     fichier : {0}'.format(sortie)))          
        vl = QgsVectorLayer("Point?crs=epsg:2154", "temp", 'memory')
        from qgis.PyQt.QtCore import QVariant
        pr = vl.dataProvider()
        pr.addAttributes([QgsField("VAL", QVariant.Double),
                          QgsField("R",  QVariant.Double),
                          QgsField("SECT", QVariant.String)])
        vl.updateFields() 
        if len(legendCustomValues) == 0:
            legendCustomValues = (maxValue,maxValue/3,maxValue/9)
        else:
            # legendCustomValues = sorted(legendCustomValues, reverse= True)
            legendCustomValues =sorted([float(item) for item in legendCustomValues ], reverse = True)
        for i in legendCustomValues:
            radius = coeff * (i/math.pi) ** .5
            f = QgsFeature()
            if representation == 0:
                x = xLegend+maxRadius/2-radius/2
            else :
                x = xLegend
            y = yLegend-maxRadius/2+radius/2
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
            f.setAttributes([i, radius, "texte"])
            pr.addFeature(f)
        vl.updateExtents() 
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               pr.fields(), QgsWkbTypes.Polygon, vl.crs()) 
                                               
        feedback.pushInfo(self.tr('     • Liste des valeurs à afficher : {0}'.format(legendCustomValues))) 
        feedback.pushInfo('')  
        feedback.pushInfo(self.tr('    Coordonnées de la légende :'))             
        feedback.pushInfo("      • X :    {0}".format(xLegend))
        feedback.pushInfo("      • Y :    {0}".format(yLegend))  
        feedback.pushInfo('____________________')            
        feedback.pushInfo('')   
        
        result = processing.run("qgis:rectanglesovalsdiamondsvariable",
                        {'INPUT': vl,
                         'SHAPE':representation,
                         'WIDTH': 'R',
                         'HEIGHT': 'R',
                         'ROTATION':None,
                         'SEGMENTS':36,
                         'OUTPUT':'memory:'},
                          feedback = feedback)



             
        # Add features to the sink
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)   
            
        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        
        self.dest_id = dest_id

        return {self.OUTPUT: dest_id}
        
    def postProcessAlgorithm(self, context, feedback):
        # Styling the legend
        output = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        if self.representation == 0:
            # circles
            path = os.path.dirname(__file__) + '/styles/circles_legend.qml'
        elif self.representation == 1:
            # diamons
            path = os.path.dirname(__file__) + '/styles/diamons_legend.qml'
        else:
            # squares
            path = os.path.dirname(__file__) + '/styles/squares_legend.qml'
        output.loadNamedStyle(path)
        output.triggerRepaint()
        return {self.OUTPUT: self.dest_id}
        
    def shortHelpString(self):
        return self.tr("Légende pour les analyses en ronds.\n \n \
                       <h3>Échelle des ronds</h3> \n \
                       L'échelle des ronds est défini par une valeur (généralement le maximum) associé au rayon correspondant \n \
                       <h3>Les valeurs à représenter</h4> \n \
                       Par défaut l'extension représente les valeurs \n -> MAX, MAX/3 et MAX/9\n \
                       Il est possible de personnaliser l'échelle en indiquant les valeurs que \
                       l'on souhaite représenter en les saisissant de cette manière :\n \
                       -> 100000;15000;5000 \n\n \
                       La légende se place automatiquement au centre de du canevas")

                       
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbolslegend'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Générer une légende seule')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Symboles proportionnels')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateCirclesLegendAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRondsLegende.png')

class FormatProportionalSymbolsLegendAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    SHAPE = 'SHAPE'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon,QgsProcessing.TypeVectorPoint],
                optional=False
            )
        )

        project = QgsProject.instance()

        try:
            representation = QgsExpressionContextUtils.projectScope(project).variable('thematic_circlesRepresentation')
        except:
            representation = 0
            
        self.shapes = [self.tr('Circles'), self.tr('Diamons'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Type of representation'),
                defaultValue = representation,
                options=self.shapes
            )
        ) 
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        # Type of symbols
        representation0 = self.parameterAsInt( parameters, self.SHAPE, context )
        
        if self.parameterAsInt( parameters, self.SHAPE, context ) == 0:
            # circles
            source.loadNamedStyle(os.path.dirname(__file__) + '/styles/circles_legend.qml')
        elif self.parameterAsInt( parameters, self.SHAPE, context ) == 1:
            # diamons
            source.loadNamedStyle(os.path.dirname(__file__) + '/styles/diamons_legend.qml')
        else:
            # squares
            source.loadNamedStyle(os.path.dirname(__file__) + '/styles/squares_legend.qml')
            
        source.triggerRepaint()
        return {self.INPUT: source}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'formatproportionalsymbolslegend'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Appliquer une symbologie de légende')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Symboles proportionnels')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return FormatProportionalSymbolsLegendAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRonds.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Description html") 
