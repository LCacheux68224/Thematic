# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Thematic
                                 A QGIS plugin
 Thematic cartography tools for processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-19
        copyright            : (C) 2018 by Lionel Cacheux
        email                : lionel.cacheux@gmx.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lionel Cacheux'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Lionel Cacheux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication
import os
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsFeatureRequest,
                       QgsWkbTypes,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterField,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFeatureSink,
                       QgsVectorLayer,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsExpressionContextUtils,
                       QgsProcessingUtils,
                       QgsSymbol,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory,
                       QgsCategorizedSymbolRenderer,
                       QgsProject)

from qgis.utils import iface
import processing , math
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *

# ---------------------------- #
# Create proportional circles  #
# ---------------------------- #

class CreateAutomaticSymbolsAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    ANALYSIS_LAYER = 'ANALYSIS_LAYER'
    COLUMN = 'COLUMN'
    SHAPE = 'SHAPE'
    ADD_LEGEND = 'ADD_LEGEND'
    OUTPUT2 = 'OUTPUT2'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon,QgsProcessing.TypeVectorPoint],
                optional=False
            )
        )
        
        self.addParameter(QgsProcessingParameterField(
                self.COLUMN,
                self.tr('Value to represent'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                False
            )
        )
        
        self.shapes = [self.tr('Circles'), self.tr('Diamonds'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Representation'),
                options=self.shapes
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ANALYSIS_LAYER,
                self.tr("Layer used for the automatic scale calculation"),
                [QgsProcessing.TypeVectorPolygon],
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterBoolean(self.ADD_LEGEND,
                self.tr('Generate a legend'),
                defaultValue=True))
        
        
        # Output vectors
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Proportional symbols layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT2, 
                self.tr('Legend layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
        
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        # Parameters
        
        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        stockValue = self.parameterAsString(parameters, self.COLUMN , context) 
        self.stockValue = stockValue
        analysisLayer = self.parameterAsSource(parameters, self.ANALYSIS_LAYER, context)
        addLegend = self.parameterAsBool(parameters,self.ADD_LEGEND,context)
        features = analysisLayer.materialize(QgsFeatureRequest()).getFeatures()
        
        # invert order of representation -> squares, diamonds, circles/ovals
        representation = abs(self.parameterAsInt( parameters, self.SHAPE, context )-2)
        
        # area of the analysis layer for automatic scale
        layerArea = sum([element.geometry().area() for element in features])
        
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo('    {0}'.format(self.tr("Proportional symbols")))
        feedback.pushInfo('') 
        feedback.pushInfo("     • {0} : {1}".format(self.tr("Variable to represent"),stockValue))
        feedback.pushInfo("     • {0} : {1}".format(self.tr("Polygon layer used for the automatic scale calculation"),analysisLayer.sourceName()))
        feedback.pushInfo('')
        
        selection = processing.run("native:selectbylocation", 
                    {'INPUT': source ,
                     'PREDICATE':[0],
                     'INTERSECT':analysisLayer.materialize(QgsFeatureRequest()),
                     'METHOD':0},
                     feedback = None)
                     
        selectedPoints = processing.run("native:saveselectedfeatures", 
                    {'INPUT':source,
                     'OUTPUT':'memory:'},
                     feedback = None)
        
        # Values to represent in the legend 
        features = selectedPoints['OUTPUT'].getFeatures()
        attributeList = sorted([abs(element[stockValue]) for element in features if element[stockValue] != None], reverse=True)
        val1 = attributeList[0]
        if attributeList[1] <= val1 / 3 :
            val2 = attributeList[1]
        else : 
            val2 = val1/3
        if attributeList[2] <= val2 /3:
            val3= attributeList[2]
        else :
            val3 = val2/3
        
        summary = processing.run("qgis:basicstatisticsforfields", 
                        {'INPUT_LAYER':selectedPoints['OUTPUT'],
                            'FIELD_NAME':stockValue
                        },
                        feedback = None)
        somme = summary['SUM']
        empty = summary['EMPTY']
        feedback.pushInfo("     • "+self.tr("Missing values")+" :  {0}".format(empty))
        feedback.pushInfo('')
        
        # Type of symbols
        # representation = self.parameterAsInt( parameters, self.SHAPE, context )

        if representation == 2:
            # circles
            maxWidth = 2*math.sqrt(abs(val1)*layerArea/(7*math.pi*somme))
            widthFormula = '2*sqrt(abs("{0}")*{1}/(7*pi()*{2}))'.format(stockValue, layerArea, summary['SUM']) 
            
        elif representation == 1:
            # diamonds
            maxWidth = math.sqrt(2*abs(val1)*layerArea/(7*somme))
            widthFormula = 'sqrt(2*abs("{0}")*{1}/(7*{2}))'.format(stockValue, layerArea, summary['SUM']) 
            
        else:
            # squares
            maxWidth = math.sqrt(abs(val1)*layerArea/(7*somme))
            widthFormula = 'sqrt(abs("{0}")*{1}/(7*{2}))'.format(stockValue, layerArea, summary['SUM']) 
        
        project = QgsProject.instance()
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsMaxValue',val1)
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsmaxWidth',maxWidth)
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsRepresentation',representation)
        
        # Test if the new attributes allready exists in attribute table
        fieldList = [field.name() for field in source.fields()]    
        
        widthLabel ={ 2: self.tr("D"),
                      1: self.tr("D"),
                      0: self.tr("L")}
        
        # Test if the new attributes allready exists in attribute table
        valueName, widthName, varName = 'VAL', widthLabel[representation], 'VAR'
        i , iLabel = 0, ''
        while (valueName+iLabel) in fieldList \
                or (widthName+iLabel) in fieldList \
                or (varName+iLabel) in fieldList:
            i += 1
            iLabel = '_'+str(i)
        
        valueName       += iLabel
        widthName      += iLabel
        varName         += iLabel
        
        self.varName = varName
        
        # Ajout de la colonne R
        widthAttribute = processing.run("qgis:fieldcalculator", 
                        {'INPUT':source,
                         'FIELD_NAME':widthName,
                         'FIELD_TYPE':0,
                         'FIELD_LENGTH':10,
                         'FIELD_PRECISION':3,
                         'NEW_FIELD':True,
                         'FORMULA':widthFormula,
                         'OUTPUT':'memory:'},
                          feedback=None)
        varTexte = u'if( \"{0}\" >= 0,\'1\',\'0\')'.format(stockValue)
        addCategoryAttribute = processing.run("qgis:fieldcalculator", 
                        {'INPUT':widthAttribute['OUTPUT'],
                         'FIELD_NAME':varName,
                         'FIELD_TYPE':2,
                         'FIELD_LENGTH':len(varTexte),
                         'FIELD_PRECISION':3,
                         'NEW_FIELD':True,
                         'FORMULA':varTexte,
                         'OUTPUT':'memory:'},
                          feedback=None)
        
        centroid = processing.run("native:centroids", 
                        {'INPUT':addCategoryAttribute['OUTPUT'],
                         'ALL_PARTS':False,
                         'OUTPUT':'memory:'},
                          feedback = None)   
        sortedLayer = processing.run("native:orderbyexpression", 
                        {'INPUT': centroid['OUTPUT'],
                         'EXPRESSION':'\"{0}\"'.format(widthName),
                         'ASCENDING':False,
                         'NULLS_FIRST':None,
                         'OUTPUT':'memory:'},
                          feedback=None)
        
        result = processing.run("qgis:rectanglesovalsdiamondsvariable",
                        {'INPUT': sortedLayer['OUTPUT'],
                         'SHAPE':representation,
                         'WIDTH':widthName,
                         'HEIGHT':widthName,
                         'ROTATION':None,
                         'SEGMENTS':72,
                         'OUTPUT':'memory:'},
                          feedback = None)
        
        # Add features to the sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].crs())        
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
        

        feedback.pushInfo("     • {0} :".format(self.tr('Automatic scale')))   
        feedback.pushInfo("     • {0} : {1}".format(self.tr("Value"),val1))
        feedback.pushInfo("     • {0} : {1}".format(self.tr("Width"),maxWidth))  
        feedback.pushInfo('')
        
        self.dest_id = dest_id
        self.varName = varName
        
        if addLegend:       
            
            xLegend = source.sourceExtent().xMaximum()+maxWidth
            yLegend = (source.sourceExtent().yMinimum()+source.sourceExtent().yMaximum())/2
            legendCoords = str(xLegend)+','+str(yLegend)
            result2 = processing.run("thematic:proportionalsymbolslegend", 
                        {'SHAPE':abs(representation-2),
                        'MAX_VALUE':val1,
                        'MAX_WIDTH':maxWidth,
                        'VALUES_LIST':'',
                        'XY_LEGEND':legendCoords,
                        'OUTPUT':'memory:'},
                        feedback = None)    
            feedback.pushInfo("    {0} :".format(self.tr('Values in the legend')))
            feedback.pushInfo("     • {0} : {1}".format(self.tr("value 1"),val1))
            feedback.pushInfo("     • {0} : {1}".format(self.tr("value 2"),val2))
            feedback.pushInfo("     • {0} : {1}".format(self.tr("value 3"),val3)) 
            feedback.pushInfo("     {0} :".format(self.tr('Legend coordinates')))             
            feedback.pushInfo("     • {0} : {1}".format(self.tr("X"),xLegend))
            feedback.pushInfo("     • {0} : {1}".format(self.tr("Y"),yLegend))              
            feedback.pushInfo('____________________')
            feedback.pushInfo('')             
            (sink2, dest_id2) = self.parameterAsSink(parameters, self.OUTPUT2, context,
                                               result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())        
            features = result2['OUTPUT'].getFeatures()
            for feature in features:
                sink2.addFeature(feature, QgsFeatureSink.FastInsert)
                
            # to get hold of the layer in post processing for styling the legend
            self.dest_id2=dest_id2
            self.representation = representation
            return {self.OUTPUT: 'dest_id', self.OUTPUT2: 'dest_id2'}            
        else:
            feedback.pushInfo("   {0}".format(self.tr('No legend requested')))   
            feedback.pushInfo('____________________')
            feedback.pushInfo('')
            
            self.dest_id2 =  None
            return {self.OUTPUT: 'dest_id'}
    
    def postProcessAlgorithm(self, context, feedback):
        # Styling the analysis
        # output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        # categories = []
        #
        # symbol = QgsSymbol.defaultSymbol(output0.geometryType())
        # layer_style = {}
        # layer_style['color'] = '#fdbf6f'
        # layer_style['outline'] = '#000000'
        # layer_style['outline_width'] = '0.1'
        # symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        # if symbol_layer is not None:
        #     symbol.changeSymbolLayer(0, symbol_layer)
        # category = QgsRendererCategory('1 - '+self.stockValue + ' > 0', symbol, str(self.stockValue + ' >= 0'))
        # categories.append(category)
        #
        # symbol = QgsSymbol.defaultSymbol(output0.geometryType())
        # layer_style = {}
        # layer_style['color'] = '#a6cee3'
        # layer_style['outline'] = '#000000'
        # layer_style['outline_width'] = '0.1'
        # symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        # if symbol_layer is not None:
        #     symbol.changeSymbolLayer(0, symbol_layer)
        # category = QgsRendererCategory('2 - '+self.stockValue + ' < 0', symbol, str(self.stockValue + ' < 0'))
        # categories.append(category)
        #
        # renderer = QgsCategorizedSymbolRenderer(self.varName, categories)
        # if renderer is not None:
        #     output0.setRenderer(renderer)
        # output0.triggerRepaint()

        # 'attribute value' : ('symbol colour', 'legend name')
        # sign_class = {
        #     '1 - {0} > 0'.format(self.stockValue): ('#fdbf6f', '{0} > 0'.format(self.stockValue)),
        #     '2 - {0} < 0'.format(self.stockValue): ('#a6cee3', '{0} < 0'.format(self.stockValue))
        #
        # }

        # Create list to store symbology properties
        # categories = []
        # Iterate through the dictionary
        # for classes, (color, label) in sign_class.items():
        #     # Automatically set symbols based on layer's geometry
        #     symbol = QgsSymbol.defaultSymbol(output0.geometryType())
        #     # Set colour
        #     symbol.setColor(QColor(color))
        #     # Set the renderer properties
        #     category = QgsRendererCategory(classes, symbol, label)
        #     categories.append(category)
        # # Field name
        # expression = self.varName
        # # Set the categorized renderer
        # renderer = QgsCategorizedSymbolRenderer(expression, categories)
        # output0.setRenderer(renderer)
        # # Refresh layer
        # output0.triggerRepaint()


        if self.dest_id is not None:
            output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
            path = os.path.dirname(__file__) + '/styles/symbols.qml'
            output0.loadNamedStyle(path)
            output0.triggerRepaint()

        # Styling de legend
        if self.dest_id2 is not None:
            # Styling the legend
            output = QgsProcessingUtils.mapLayerFromString(self.dest_id2, context)
            if self.representation == 2:
                # circles
                path = os.path.dirname(__file__) + '/styles/circles_legend.qml'
            elif self.representation == 1:
                # diamonds
                path = os.path.dirname(__file__) + '/styles/diamons_legend.qml'
            else:
                # squares
                path = os.path.dirname(__file__) + '/styles/squares_legend.qml'
            output.loadNamedStyle(path)
            output.triggerRepaint()
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: self.dest_id2}
        else:
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: None}


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'automaticproportionalsymbols'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Symbols with automatic scale')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Proportional symbols')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('CreateAutomaticSymbolsAlgorithm', string)

    def createInstance(self):
        return CreateAutomaticSymbolsAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRonds.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Description html")    

# ---------------------------- #
# Create custom symbols layer  #
# ---------------------------- #

class CreateCustomSymbolsAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.
    
    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.
    
    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """
    
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    COLUMN = 'COLUMN'
    MAX_WIDTH = 'MAX_WIDTH'
    MAX_VALUE = 'MAX_VALUE'
    SHAPE = 'SHAPE'
    ADD_LEGEND = 'ADD_LEGEND'
    OUTPUT2 = 'OUTPUT2'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        project = QgsProject.instance()
        maxValue = QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsMaxValue')

        try:
            maxValue = QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsMaxValue')
            maxWidth = QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsmaxWidth')
            representation = abs(int(QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsRepresentation'))-2)
        except:
            maxValue = 1
            maxWidth = 1
            representation = 0
        
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon,QgsProcessing.TypeVectorPoint],
                optional=False
            )
        )
        
        self.addParameter(QgsProcessingParameterField(
                self.COLUMN,
                self.tr('Value to represent'),
                None,
                self.INPUT,
                QgsProcessingParameterField.Numeric,
                False
            )
        )
        
        self.shapes = [self.tr('Circles'), self.tr('Diamonds'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Symbol'),
                options=self.shapes,
                defaultValue=representation
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_VALUE,
                self.tr('Maximum value to represent'),
                minValue=0,
                defaultValue = maxValue,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_WIDTH,
                self.tr('Associated width to the maximum value (in meters)'),
                minValue=0,
                defaultValue=maxWidth,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterBoolean(self.ADD_LEGEND,
                self.tr('Generate a legend'),
                defaultValue=True))                
            
        # Output layers for analysis an legend
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Proportional symbols output layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )         
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT2, 
                self.tr('Legend output layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        # Input paramenters
        
        source = self.parameterAsSource(parameters, self.INPUT, context).materialize(QgsFeatureRequest())
        stockValue = self.parameterAsString(parameters, self.COLUMN , context) 
        maxWidth = self.parameterAsInt(parameters,self.MAX_WIDTH,context)
        maxValue = self.parameterAsInt(parameters,self.MAX_VALUE,context)
        addLegend = self.parameterAsBool(parameters,self.ADD_LEGEND,context)
        
        # invert order of representation -> squares, diamonds, circles/ovals
        representation = abs(self.parameterAsInt( parameters, self.SHAPE, context )-2)
        
        #global variables for ther symbology in post processing
        self.stockValue = stockValue
        self.representation = representation
        
        feedback.pushInfo('____________________')
        feedback.pushInfo('')       
        feedback.pushInfo('    {0}'.format(self.tr("Proportional symbols")))
        feedback.pushInfo('')           
        feedback.pushInfo("     • {0} : {1}".format(self.tr("Variable to represent"),stockValue))
        feedback.pushInfo('')
        
        summary = processing.run("qgis:basicstatisticsforfields", 
                        {'INPUT_LAYER':source,
                            'FIELD_NAME':stockValue
                        },
                        feedback = None)
        empty = summary['EMPTY']
        feedback.pushInfo("     • {0} : {0}".format(self.tr("Missing values"),empty))
        feedback.pushInfo('')
        
        feedback.pushInfo("     • {0} :".format(self.tr('Custom scale')))   
        # feedback.pushInfo("     • {0} : {0}".format(self.tr("Value"),val1))
        feedback.pushInfo("     • {0} : {0}".format(self.tr("Width"),maxWidth))
        feedback.pushInfo('')
        
        if maxWidth*maxValue == 0:
            feedback.pushInfo('')
            feedback.reportError("     • {0}".format("0 not allowed for the scale"))
            feedback.pushInfo('')
            feedback.pushInfo('____________________')
            
        else:
            widthFormula = '{0} * sqrt(abs("{1}")/{2})'.format(maxWidth,stockValue,maxValue)
            
            fieldList = [field.name() for field in source.fields()]
            
            widthLabel ={ 2: self.tr("D"),
                          1: self.tr("D"),
                          0: self.tr("L")}
                          
            # Test if the new attributes allready exists in attribute table
            valueName, widthName, varName = 'VAL', widthLabel[representation], 'VAR'
            i , iLabel = 0, ''
            while (valueName+iLabel) in fieldList \
                    or (widthName+iLabel) in fieldList \
                    or (varName+iLabel) in fieldList:
                i += 1
                iLabel = '_'+str(i)
            
            valueName       += iLabel
            widthName      += iLabel
            varName    += iLabel
            
            self.varName = varName
            
            # add width attribute
            addWidthAttribute = processing.run("qgis:fieldcalculator", 
                            {'INPUT':source,
                             'FIELD_NAME':widthName,
                             'FIELD_TYPE':0,
                             'FIELD_LENGTH':10,
                             'FIELD_PRECISION':3,
                             'NEW_FIELD':True,
                             'FORMULA':widthFormula,
                             'OUTPUT':'memory:'},
                              feedback=None)
            varTexte = u'if( \"{0}\" >= 0,\'1\',\'0\')'.format(stockValue)
            # add category (>0 or <0) 
            addCategoryAttribute = processing.run("qgis:fieldcalculator", 
                            {'INPUT':addWidthAttribute['OUTPUT'],
                             'FIELD_NAME':varName,
                             'FIELD_TYPE':2,
                             'FIELD_LENGTH':len(varTexte),
                             'FIELD_PRECISION':3,
                             'NEW_FIELD':True,
                             'FORMULA':varTexte,
                             'OUTPUT':'memory:'},
                              feedback=None)
                              
            centroid = processing.run("native:centroids", 
                            {'INPUT':addCategoryAttribute['OUTPUT'],
                             'ALL_PARTS':False,
                             'OUTPUT':'memory:'},
                              feedback = None)   
            sortedLayer = processing.run("native:orderbyexpression", 
                            {'INPUT': centroid['OUTPUT'],
                             'EXPRESSION':'\"{0}\"'.format(widthName),
                             'ASCENDING':False,
                             'NULLS_FIRST':False,
                             'OUTPUT':'memory:'},
                              feedback = None) 

            result = processing.run("qgis:rectanglesovalsdiamondsvariable",
                            {'INPUT': sortedLayer['OUTPUT'],
                             'SHAPE':representation,
                             'WIDTH':widthName,
                             'HEIGHT':widthName,
                             'ROTATION':None,
                             'SEGMENTS':72,
                             'OUTPUT':'memory:'},
                              feedback = None)
                              
            # Add features to the sink
            (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                                   result['OUTPUT'].fields(), QgsWkbTypes.Polygon, result['OUTPUT'].crs())
            
            self.dest_id  = dest_id
            
            features = result['OUTPUT'].getFeatures()
            for feature in features:
                sink.addFeature(feature, QgsFeatureSink.FastInsert)
            
            if addLegend:
                # OUTPUT2 = self.parameterAsOutputLayer(parameters,self.OUTPUT2,context)
                xLegend = source.sourceExtent().xMaximum()+maxWidth
                yLegend = (source.sourceExtent().yMinimum()+source.sourceExtent().yMaximum())/2
                legendCoords = str(xLegend)+','+str(yLegend)
                
                # Values to represent in the legend 
                features = source.getFeatures()
                attributeList = sorted([abs(element[stockValue]) for element in features if element[stockValue] != None], reverse=True)
                val1 = attributeList[0]
                if attributeList[1] <= val1 / 3 :
                    val2 = attributeList[1]
                else : 
                    val2 = val1/3
                if attributeList[2] <= val2 /3:
                    val3= attributeList[2]
                else :
                    val3 = val2/3
                
                result2 = processing.run("thematic:proportionalsymbolslegend", 
                            {'SHAPE':abs(representation-2),
                             'MAX_VALUE':maxValue,
                             'MAX_WIDTH':maxWidth,
                             'VALUES_LIST':'',
                             'XY_LEGEND':legendCoords,
                             'OUTPUT':'memory:'},
                             feedback = None)
                             
                feedback.pushInfo("    {0} :".format(self.tr('Values in the legend')))
                feedback.pushInfo("     • {0} : {1}".format(self.tr("value 1"),val1))
                feedback.pushInfo("     • {0} : {1}".format(self.tr("value 2"),val2))
                feedback.pushInfo("     • {0} : {1}".format(self.tr("value 3"),val3)) 
                feedback.pushInfo("     {0} :".format(self.tr('Legend coordinates')))             
                feedback.pushInfo("     • {0} : {1}".format(self.tr("X"),xLegend))
                feedback.pushInfo("     • {0} : {1}".format(self.tr("Y"),yLegend)) 
                feedback.pushInfo('____________________')            
                feedback.pushInfo('') 
                (sink2, dest_id2) = self.parameterAsSink(parameters, self.OUTPUT2, context,
                                                   result2['OUTPUT'].fields(), QgsWkbTypes.Polygon, result2['OUTPUT'].crs())     
                self.dest_id2 = dest_id2
                
                features = result2['OUTPUT'].getFeatures()
                for feature in features:
                    sink2.addFeature(feature, QgsFeatureSink.FastInsert)                                                 
                return {self.OUTPUT: 'dest_id', self.OUTPUT2: 'dest_id2'}
            else:
                feedback.pushInfo("   {0}".format(self.tr('No legend requested')))
                feedback.pushInfo('____________________')
                feedback.pushInfo('')
                project = QgsProject.instance()
                QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsMaxValue',maxValue)
                QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsmaxWidth',maxWidth)
                QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsRepresentation',representation)
                self.dest_id2 =  None
                return {self.OUTPUT: 'dest_id'}


    def postProcessAlgorithm(self, context, feedback):
        # Styling the analysis
        # output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        # categories = []
        #
        # symbol = QgsSymbol.defaultSymbol(output0.geometryType())
        # layer_style = {}
        # layer_style['color'] = '#fdbf6f'
        # layer_style['outline'] = '#000000'
        # layer_style['outline_width'] = '0.1'
        # symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        # if symbol_layer is not None:
        #     symbol.changeSymbolLayer(0, symbol_layer)
        # category = QgsRendererCategory('1 - '+self.stockValue + ' > 0', symbol, str(self.stockValue + ' >= 0'))
        # categories.append(category)
        #
        # symbol = QgsSymbol.defaultSymbol(output0.geometryType())
        # layer_style = {}
        # layer_style['color'] = '#a6cee3'
        # layer_style['outline'] = '#000000'
        # layer_style['outline_width'] = '0.1'
        # symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)
        # if symbol_layer is not None:
        #     symbol.changeSymbolLayer(0, symbol_layer)
        # category = QgsRendererCategory('2 - '+self.stockValue + ' < 0', symbol, str(self.stockValue + ' < 0'))
        # categories.append(category)
        #
        # renderer = QgsCategorizedSymbolRenderer(self.varName, categories)
        # if renderer is not None:
        #     output0.setRenderer(renderer)
        # output0.triggerRepaint()


        if self.dest_id is not None:
            output0 = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
            path = os.path.dirname(__file__) + '/styles/symbols.qml'
            output0.loadNamedStyle(path)
            output0.triggerRepaint()
        
        # Styling de legend
        if self.dest_id2 is not None:
            # Styling the legend
            output = QgsProcessingUtils.mapLayerFromString(self.dest_id2, context)
            if self.representation == 2:
                # circles
                path = os.path.dirname(__file__) + '/styles/circles_legend.qml'
            elif self.representation == 1:
                # diamonds
                path = os.path.dirname(__file__) + '/styles/diamons_legend.qml'
            else:
                # squares
                path = os.path.dirname(__file__) + '/styles/squares_legend.qml'
            output.loadNamedStyle(path)
            output.triggerRepaint()
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: self.dest_id2}
        else:
            return {self.OUTPUT: self.OUTPUT, self.OUTPUT2: None}
            
            
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'customproportionalsymbols'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Symbols with custom scale')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Proportional symbols')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('CreateCustomSymbolsAlgorithm', string)

    def createInstance(self):
        return CreateCustomSymbolsAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRonds2.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Description html") 

# ---------------------------- #
# Create circles legend #
# ---------------------------- #

class CreateSymbolsLegendAlgorithm(QgsProcessingAlgorithm):
    """
    Gerenate a legend layer for proportional symbols
    (circles, diamons and squares)
    """
    
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    
    OUTPUT = 'OUTPUT'
    COLUMNS = 'COLUMNS'
    MAX_WIDTH = 'MAX_WIDTH'
    MAX_VALUE = 'MAX_VALUE'
    VALUES_LIST = 'VALUES_LIST'
    XY_LEGEND = 'XY_LEGEND'
    SHAPE = 'SHAPE'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        # Use the parameters of an eventualy previous analysis
        project = QgsProject.instance()
        try:
            maxValue = QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsMaxValue')
            maxWidth = QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsmaxWidth')
            representation = abs(int(QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsRepresentation'))-2)
        except:
            # if not
            maxValue = 1
            maxWidth = 1
            representation = 0
        
        # Parametres in UI
        
        self.shapes = [self.tr('Circles'), self.tr('Diamonds'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Symbol'),
                defaultValue = representation,
                options=self.shapes
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_VALUE,
                self.tr('Maximum value for the symbols'),
                minValue=0,
                defaultValue = maxValue,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_WIDTH,
                self.tr('Width associated to the maximum value'),
                minValue=0,
                defaultValue = maxWidth,
                optional=False
            )
        )
        
        self.addParameter(
            QgsProcessingParameterString(
                self.VALUES_LIST,
                self.tr('Values to represent (example : 3000;1000;300)'),
                optional=True
            )
        )
        
        # Advanced parameters only for batch processing (Legend position)
        
        params = []
        
        params.append(
            QgsProcessingParameterString(
                self.XY_LEGEND,
                self.tr('Legend coordinates'),
                optional=True
            )
        )
        for param in params:
            param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagHidden)
            self.addParameter(param)        

        
           
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        
        # Output layer

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Legend ouput layer'), 
                type=QgsProcessing.TypeVectorPolygon
            )
        )   
        '''
        self.addParameter(
            QgsProcessingParameterString(
                self.XY_LEGEND,
                self.tr('Position X,Y de la légende'),
                optional=True
            ).setFlags(QgsProcessingParameterDefinition.FlagHidden)
        )
        '''
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        # parameters initialisation
        
        representation = self.parameterAsInt( parameters, self.SHAPE, context )
        # invert order of representation -> squares, diamonds, circles/ovals
        representation = abs(representation-2)
        maxWidth = self.parameterAsInt(parameters,self.MAX_WIDTH,context)
        maxValue = self.parameterAsInt(parameters,self.MAX_VALUE,context)  
        valueList = self.parameterAsString(parameters, self.VALUES_LIST , context)
        legendCustomValues = valueList.strip().replace(';',' ').split()
        coordsLegendText = self.parameterAsString(parameters, self.XY_LEGEND , context)
        
        project = QgsProject.instance()
        
        # save the parameters as project variable
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsRepresentation',representation)
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsMaxValue',maxValue)
        QgsExpressionContextUtils.setProjectVariable(project,'thematic_symbolsmaxWidth',maxWidth)
        
        # set a global variable for layer styling in postprocessing
        self.representation = representation
        
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
        feedback.pushInfo('    {0}'.format(self.tr("Proportional symbols legend")))
        feedback.pushInfo('')
        feedback.pushInfo('     {0} :'.format(self.tr("Symbols scale")))
        feedback.pushInfo('')    
        feedback.pushInfo('     • {0} : {1}'.format(self.tr('Value'),maxValue))   
        feedback.pushInfo('     • {0} : {1}'.format(self.tr('Width'),maxWidth))              
        feedback.pushInfo('')   

        # set the legend  coordinates
        
        if len(coordsLegendText) >0 :
            # with coordinates parameters
            legendCoordsList = coordsLegendText.strip().split(',')
            coordsLegend =[float(item) for item in legendCoordsList ]
            xLegend = coordsLegend[0]
            yLegend = coordsLegend[1]
        else:
            # no coordinates given
            # -> center the legend in the canevas
            canevasExtent = iface.mapCanvas().extent()
            xLegend = (canevasExtent.xMaximum()+canevasExtent.xMinimum() )/2
            yLegend = (canevasExtent.yMaximum()+canevasExtent.yMinimum() )/2

        coeff = maxWidth * (math.pi/maxValue)**.5
        Value = maxValue
        
        # values to represent in the legend
        

            
        if len(legendCustomValues) > 0:
            try:
                # legendCustomValues = sorted(legendCustomValues, reverse= True)
                legendCustomValues =sorted([float(item) for item in legendCustomValues ], reverse = True)
                feedback.pushInfo('     • {0} : {1}'.format(self.tr('Values in the legend'),legendCustomValues)) 
            except:
                feedback.reportError('     • {0} : {1}'.format(self.tr('Values for the legend : syntax error'),legendCustomValues))
                legendCustomValues = (maxValue,maxValue/3,maxValue/9)
                feedback.reportError('     • {0} : {1}'.format(self.tr('Replaced by default legend values'),legendCustomValues))
        else:
            legendCustomValues = (maxValue,maxValue/3,maxValue/9)
            feedback.pushInfo('     • {0} : {1}'.format(self.tr('Default legend values'),legendCustomValues)) 
            
        feedback.pushInfo('')
        
        # create a temporary point layer
        widthLabel ={ 2: self.tr("D"),
                      1: self.tr("D"),
                      0: self.tr("L")}
        crsString = project.crs().authid()
        vl = QgsVectorLayer("Point?crs="+crsString, "temp", 'memory')
        from qgis.PyQt.QtCore import QVariant
        pr = vl.dataProvider()
        pr.addAttributes([QgsField("VAL", QVariant.Double),
                          QgsField(widthLabel[representation], QVariant.Double)])
        vl.updateFields() 
        
        for i in legendCustomValues:
            width = coeff * (i/math.pi) ** .5
            f = QgsFeature()
            if representation == 0:
                x = xLegend+maxWidth/2-width/2
            else :
                x = xLegend
            y = yLegend-maxWidth/2+width/2
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
            f.setAttributes([i, width])
            pr.addFeature(f)
        vl.updateExtents() 
        
        feedback.pushInfo("     {0} :".format((self.tr('Legend coordinates'))))             
        feedback.pushInfo("     • {0} : {1}".format(self.tr("X"),xLegend))
        feedback.pushInfo("     • {0} : {1}".format(self.tr("Y"),yLegend)) 
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               pr.fields(), QgsWkbTypes.Polygon, vl.crs()) 
        
        result = processing.run("qgis:rectanglesovalsdiamondsvariable",
                        {'INPUT': vl,
                         'SHAPE': representation,
                         'WIDTH': widthLabel[representation],
                         'HEIGHT': widthLabel[representation],
                         'ROTATION': None,
                         'SEGMENTS': 72,
                         'OUTPUT': 'memory:'},
                          feedback = None)
                          
        feedback.pushInfo('____________________')
        feedback.pushInfo('')
             
        # Add features to the sink
        features = result['OUTPUT'].getFeatures()
        for feature in features:
            sink.addFeature(feature, QgsFeatureSink.FastInsert)   
            
        # Return the results of the algorithm. 
        
        self.dest_id = dest_id
        return {self.OUTPUT: dest_id}
        
    def postProcessAlgorithm(self, context, feedback):
        # Apply a symbology to the legend
        output = QgsProcessingUtils.mapLayerFromString(self.dest_id, context)
        if self.representation == 2:
            # circles
            path = os.path.dirname(__file__) + '/styles/circles_legend.qml'
        elif self.representation == 1:
            # diamonds
            path = os.path.dirname(__file__) + '/styles/diamons_legend.qml'
        else:
            # squares
            path = os.path.dirname(__file__) + '/styles/squares_legend.qml'
        output.loadNamedStyle(path)
        output.triggerRepaint()
        return {self.OUTPUT: self.dest_id}
        
    def shortHelpString(self):
        return self.tr("Légende pour les analyses en symboles proportionnels.\n \n \
                       <h3>Échelle des ronds, losanges ou carrés</h3> \n \
                       L'échelle est défini par une valeur (généralement le maximum) associé à une largeur exprimée en mètres \n \n \
                       Par défaut les valeurs représentées correspondent aux :\n \
                       MAX, MAX/3 et MAX/9\n \
                       Il est cependant possible de personnaliser l'échelle en indiquant les valeurs devant être représentées \
                       en les saisissant de cette manière :\n \
                       -> 100000;15000;5000 \n\n \
                       La légende se placera automatiquement au centre de du canevas")

                       
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbolslegend'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Generate a symbol legend')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Proportionnal symbols')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('CreateSymbolsLegendAlgorithm', string)

    def createInstance(self):
        return CreateSymbolsLegendAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRondsLegende2.png')

class FormatProportionalSymbolsLegendAlgorithm(QgsProcessingAlgorithm):
    """
    Apply a symbology to a legend layer for proportional symbols
    (circles, diamons and square)
    """
    
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    SHAPE = 'SHAPE'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Legend layer'),
                [QgsProcessing.TypeVectorPolygon,QgsProcessing.TypeVectorPoint],
                optional=False
            )
        )

        project = QgsProject.instance()

        try:
            representation = QgsExpressionContextUtils.projectScope(project).variable('thematic_symbolsRepresentation')
        except:
            representation = 0
            
        self.shapes = [self.tr('Circles'), self.tr('Diamonds'), self.tr('Squares')]
        self.addParameter(QgsProcessingParameterEnum(
                self.SHAPE,
                self.tr('Symbol'),
                defaultValue = representation,
                options=self.shapes
            )
        ) 
            
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        
        source = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        # Type of symbols
        representation0 = self.parameterAsInt( parameters, self.SHAPE, context )
        
        if self.parameterAsInt( parameters, self.SHAPE, context ) == 0:
            # circles
            source.loadNamedStyle(os.path.dirname(__file__) + '/styles/circles_legend.qml')
        elif self.parameterAsInt( parameters, self.SHAPE, context ) == 1:
            # diamons
            source.loadNamedStyle(os.path.dirname(__file__) + '/styles/diamons_legend.qml')
        else:
            # squares
            source.loadNamedStyle(os.path.dirname(__file__) + '/styles/squares_legend.qml')
            
        source.triggerRepaint()
        return {self.INPUT: source}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'formatproportionalsymbolslegend'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Restore the symbology of a legend layer')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Proportionnal symbols')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'proportionalsymbols'

    def tr(self, string):
        return QCoreApplication.translate('FormatProportionalSymbolsLegendAlgorithm', string)

    def createInstance(self):
        return FormatProportionalSymbolsLegendAlgorithm()

    def icon(self):
        return QIcon(os.path.dirname(__file__) + '/images/iconRondsLegende2.png')
        
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Description html") 
